<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advanced PRNG & Lotto Analyzer Pro</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&family=Source+Code+Pro&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-boxplot@1.2.0/build/Chart.BoxPlot.min.js"></script>
    <style>
        :root {
            --primary: #5c6bc0;
            --primary-dark: #3949ab;
            --primary-light: #7986cb;
            --secondary: #26a69a;
            --dark: #2c3e50;
            --light: #f5f7fa;
            --accent: #7e57c2;
            --success: #66bb6a;
            --warning: #ffa726;
            --danger: #ef5350;
            --info: #42a5f5;
            --text-primary: #263238;
            --text-secondary: #546e7a;
            --bg-color: #f5f7fa;
            --card-bg: #ffffff;
            --border-color: #e0e0e0;
        }

        [data-theme="dark"] {
            --primary: #7986cb;
            --primary-dark: #5c6bc0;
            --primary-light: #9fa8da;
            --secondary: #26a69a;
            --dark: #cfd8dc;
            --light: #37474f;
            --accent: #9575cd;
            --success: #81c784;
            --warning: #ffb74d;
            --danger: #e57373;
            --info: #64b5f6;
            --text-primary: #eceff1;
            --text-secondary: #b0bec5;
            --bg-color: #263238;
            --card-bg: #37474f;
            --border-color: #455a64;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Roboto', sans-serif;
            line-height: 1.6;
            color: var(--text-primary);
            background-color: var(--bg-color);
            transition: all 0.3s ease;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        header {
            background: linear-gradient(135deg, var(--primary-dark), var(--primary));
            color: white;
            padding: 2rem 0;
            text-align: center;
            border-radius: 0 0 10px 10px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
            position: relative;
        }

        h1 {
            margin: 0;
            font-size: 2.5rem;
            font-weight: 500;
        }

        .subtitle {
            font-size: 1.2rem;
            opacity: 0.9;
            margin-top: 0.5rem;
            font-weight: 300;
        }

        .card {
            background: var(--card-bg);
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            padding: 1.5rem;
            margin-bottom: 2rem;
            border: 1px solid var(--border-color);
            transition: all 0.3s ease;
        }

        .card h2 {
            color: var(--primary);
            margin-top: 0;
            border-bottom: 2px solid var(--accent);
            padding-bottom: 0.5rem;
            font-weight: 500;
        }

        .tabs {
            display: flex;
            margin-bottom: 1rem;
            border-bottom: 1px solid var(--border-color);
            flex-wrap: wrap;
            gap: 5px;
        }

        .tab {
            padding: 0.75rem 1.5rem;
            cursor: pointer;
            background: var(--bg-color);
            border: 1px solid var(--border-color);
            border-radius: 5px 5px 0 0;
            transition: all 0.3s;
            font-weight: 500;
            color: var(--text-secondary);
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .tab:hover {
            background: var(--primary-light);
            color: white;
        }

        .tab.active {
            background: var(--primary);
            color: white;
            border-color: var(--primary);
        }

        .tab-content {
            display: none;
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .tab-content.active {
            display: block;
        }

        label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--text-primary);
        }

        input, select, textarea {
            width: 100%;
            padding: 0.75rem;
            margin-bottom: 1rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            font-size: 1rem;
            background: var(--card-bg);
            color: var(--text-primary);
            transition: border 0.3s;
        }

        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 2px rgba(92, 107, 192, 0.2);
        }

        button {
            background-color: var(--primary);
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 4px;
            cursor: pointer;
            font-size: 1rem;
            transition: all 0.3s;
            margin-right: 0.5rem;
            margin-bottom: 0.5rem;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        button:hover {
            background-color: var(--primary-dark);
            transform: translateY(-1px);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }

        button:active {
            transform: translateY(0);
        }

        button.secondary {
            background-color: var(--text-secondary);
        }

        button.success {
            background-color: var(--success);
        }

        button.warning {
            background-color: var(--warning);
        }

        button.danger {
            background-color: var(--danger);
        }

        button.info {
            background-color: var(--info);
        }

        .result {
            margin-top: 1rem;
            padding: 1rem;
            background-color: var(--bg-color);
            border-radius: 4px;
            border-left: 4px solid var(--accent);
            color: var(--text-primary);
        }

        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
        }

        .lotto-balls {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin: 1rem 0;
            align-items: center;
        }

        .ball {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: var(--primary);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s;
        }

        .ball:hover {
            transform: scale(1.1);
        }

        .ball.powerball {
            background-color: var(--danger);
        }

        .ball.megaball {
            background-color: var(--info);
        }

        .ball.eurostar {
            background-color: var(--success);
        }

        .progress-container {
            width: 100%;
            background-color: var(--border-color);
            border-radius: 4px;
            margin: 1rem 0;
            height: 20px;
            overflow: hidden;
        }

        .progress-bar {
            height: 100%;
            background: linear-gradient(90deg, var(--primary), var(--secondary));
            border-radius: 4px;
            width: 0%;
            transition: width 0.3s;
            position: relative;
        }

        .progress-bar::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(
                -45deg,
                rgba(255, 255, 255, 0.2) 25%,
                transparent 25%,
                transparent 50%,
                rgba(255, 255, 255, 0.2) 50%,
                rgba(255, 255, 255, 0.2) 75%,
                transparent 75%,
                transparent
            );
            background-size: 30px 30px;
            animation: progressAnimation 1s linear infinite;
        }

        @keyframes progressAnimation {
            0% { background-position: 0 0; }
            100% { background-position: 30px 0; }
        }

        .status {
            margin: 1rem 0;
            padding: 0.75rem;
            border-radius: 4px;
            font-weight: 500;
        }

        .status.info {
            background-color: rgba(66, 165, 245, 0.1);
            border-left: 4px solid var(--info);
            color: var(--info);
        }

        .status.success {
            background-color: rgba(102, 187, 106, 0.1);
            border-left: 4px solid var(--success);
            color: var(--success);
        }

        .status.warning {
            background-color: rgba(255, 167, 38, 0.1);
            border-left: 4px solid var(--warning);
            color: var(--warning);
        }

        .status.error {
            background-color: rgba(239, 83, 80, 0.1);
            border-left: 4px solid var(--danger);
            color: var(--danger);
        }

        .algorithm-info {
            margin-top: 2rem;
            padding: 1rem;
            background-color: var(--bg-color);
            border-radius: 4px;
            border-left: 4px solid var(--accent);
        }

        .algorithm-info h3 {
            color: var(--secondary);
            margin-top: 0;
        }

        .code {
            font-family: 'Source Code Pro', monospace;
            background-color: var(--bg-color);
            padding: 0.5rem;
            border-radius: 4px;
            display: block;
            overflow-x: auto;
            margin: 0.5rem 0;
            border-left: 3px solid var(--accent);
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin: 1rem 0;
        }

        th, td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid var(--border-color);
        }

        th {
            background-color: var(--bg-color);
            font-weight: 500;
            color: var(--primary);
        }

        tr:hover {
            background-color: var(--bg-color);
        }

        /* Histogram styles */
        .histogram {
            display: flex;
            height: 200px;
            align-items: flex-end;
            gap: 2px;
            margin: 1rem 0;
            padding: 1rem 0;
            border-top: 1px solid var(--border-color);
            border-bottom: 1px solid var(--border-color);
        }

        .histogram-bar {
            flex: 1;
            background: linear-gradient(to top, var(--primary), var(--secondary));
            min-width: 5px;
            position: relative;
            transition: height 0.5s ease;
        }

        .histogram-bar-label {
            position: absolute;
            bottom: -20px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 0.8rem;
            color: var(--text-secondary);
        }

        /* Frequency table styles */
        .frequency-table {
            width: 100%;
            margin: 1rem 0;
        }

        .hot-number {
            background-color: rgba(239, 83, 80, 0.1);
            font-weight: bold;
        }

        .cold-number {
            background-color: rgba(66, 165, 245, 0.1);
            font-weight: bold;
        }

        /* Tooltip styles */
        .tooltip {
            position: relative;
            display: inline-block;
            cursor: help;
        }

        .tooltip .tooltiptext {
            visibility: hidden;
            width: 200px;
            background-color: var(--dark);
            color: white;
            text-align: center;
            border-radius: 6px;
            padding: 10px;
            position: absolute;
            z-index: 100;
            bottom: 125%;
            left: 50%;
            margin-left: -100px;
            opacity: 0;
            transition: opacity 0.3s;
            font-weight: normal;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        }

        .tooltip:hover .tooltiptext {
            visibility: visible;
            opacity: 1;
        }

        /* Theme toggle */
        .theme-toggle {
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(255, 255, 255, 0.2);
            border: none;
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s;
        }

        .theme-toggle:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: rotate(30deg);
        }

        /* Loading spinner */
        .spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255,255,255,.3);
            border-radius: 50%;
            border-top-color: white;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Action buttons container */
        .action-buttons {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin: 1rem 0;
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .grid {
                grid-template-columns: 1fr;
            }
            
            h1 {
                font-size: 2rem;
            }
            
            .tabs {
                flex-direction: column;
            }
            
            .tab {
                border-radius: 4px;
                margin-bottom: 5px;
            }
        }

        /* Animations */
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        .pulse {
            animation: pulse 2s infinite;
        }

        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }

        ::-webkit-scrollbar-track {
            background: var(--bg-color);
        }

        ::-webkit-scrollbar-thumb {
            background: var(--primary);
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: var(--primary-dark);
        }

        /* Export buttons */
        .export-buttons {
            display: flex;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        /* Save/Load buttons */
        .config-buttons {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        /* Tab icons */
        .tab-icon {
            font-size: 0.9em;
        }
        
        /* Notification toast */
        .toast {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background-color: var(--success);
            color: white;
            padding: 12px 24px;
            border-radius: 4px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            z-index: 1000;
            transform: translateY(100px);
            opacity: 0;
            transition: all 0.3s ease;
        }
        
        .toast.show {
            transform: translateY(0);
            opacity: 1;
        }
        
        /* Improved number input styling */
        input[type="number"] {
            -moz-appearance: textfield;
        }
        
        input[type="number"]::-webkit-inner-spin-button,
        input[type="number"]::-webkit-outer-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        
        /* Better table styling */
        .data-table {
            width: 100%;
            border-collapse: collapse;
            margin: 1rem 0;
        }
        
        .data-table th {
            background-color: var(--primary);
            color: white;
            padding: 12px;
            text-align: left;
        }
        
        .data-table td {
            padding: 10px 12px;
            border-bottom: 1px solid var(--border-color);
        }
        
        .data-table tr:nth-child(even) {
            background-color: rgba(0,0,0,0.02);
        }
        
        .data-table tr:hover {
            background-color: rgba(0,0,0,0.05);
        }

        /* Improved Lotto Reverse styles */
        .seed-candidates {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }

        .seed-candidate {
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 1rem;
            transition: all 0.3s;
        }

        .seed-candidate:hover {
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            transform: translateY(-2px);
        }

        .verification-draws {
            margin-top: 1rem;
        }

        .verification-draw {
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 0.5rem;
        }

        .verification-draw.match {
            border-left: 4px solid var(--success);
        }

        .verification-draw.no-match {
            border-left: 4px solid var(--danger);
        }

        .numbers-comparison {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .predicted-draws {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }

        .predicted-draw {
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 1rem;
        }

        .frequency-bars {
            margin-top: 1rem;
        }

        .frequency-bar {
            display: flex;
            align-items: center;
            margin-bottom: 0.5rem;
        }

        .frequency-number {
            width: 30px;
            font-weight: bold;
        }

        .frequency-bar-inner {
            background: var(--primary);
            height: 20px;
            border-radius: 4px;
            display: flex;
            align-items: center;
            padding-left: 5px;
            color: white;
            transition: width 0.5s;
        }

        .frequency-count {
            font-size: 0.8rem;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }

        .stat-card {
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 1rem;
        }

        .hot-number, .cold-number {
            display: inline-block;
            padding: 0.25rem 0.5rem;
            margin: 0.1rem;
            border-radius: 4px;
            font-weight: bold;
        }

        .hot-number {
            background-color: rgba(239, 83, 80, 0.2);
            color: var(--danger);
        }

        .cold-number {
            background-color: rgba(66, 165, 245, 0.2);
            color: var(--info);
        }

        .common-pairs div {
            padding: 0.25rem 0;
            border-bottom: 1px solid var(--border-color);
        }

        button.small {
            padding: 0.25rem 0.5rem;
            font-size: 0.8rem;
            margin-top: 0.5rem;
        }

        .separator {
            margin: 0 5px;
            font-weight: bold;
            color: var(--text-secondary);
        }
    </style>
</head>
<body>
    <header>
        <div class="container">
            <button class="theme-toggle" id="themeToggle" title="Toggle dark mode">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="12" cy="12" r="5"></circle>
                    <line x1="12" y1="1" x2="12" y2="3"></line>
                    <line x1="12" y1="21" x2="12" y2="23"></line>
                    <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
                    <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
                    <line x1="1" y1="12" x2="3" y2="12"></line>
                    <line x1="21" y1="12" x2="23" y2="12"></line>
                    <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
                    <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
                </svg>
            </button>
            <h1>Advanced PRNG & Lotto Analyzer Pro</h1>
            <p class="subtitle">Comprehensive analysis and prediction toolkit for pseudo-random number generators and lottery systems</p>
        </div>
    </header>
    
    <div class="container">
        <div class="tabs">
            <button class="tab active" data-tab="prng-generate">
                <i class="fas fa-random tab-icon"></i> PRNG Generator
            </button>
            <button class="tab" data-tab="prng-reverse">
                <i class="fas fa-search tab-icon"></i> PRNG Reverse
            </button>
            <button class="tab" data-tab="lotto-generate">
                <i class="fas fa-ticket-alt tab-icon"></i> Lotto Generator
            </button>
            <button class="tab" data-tab="lotto-reverse">
                <i class="fas fa-search-dollar tab-icon"></i> Lotto Reverse
            </button>
            <button class="tab" data-tab="compare">
                <i class="fas fa-not-equal tab-icon"></i> Compare
            </button>
            <button class="tab" data-tab="visualization">
                <i class="fas fa-chart-bar tab-icon"></i> Visualization
            </button>
            <button class="tab" data-tab="crypto-predictor">
                <i class="fas fa-lock tab-icon"></i> Crypto Predictor
            </button>
        </div>
      
        <!-- PRNG Generator Tab -->
        <div id="prng-generate" class="tab-content active">
            <div class="config-buttons">
                <button onclick="savePRNGConfig()" class="info">
                    <i class="fas fa-save"></i> Save Config
                </button>
                <button onclick="loadPRNGConfig()" class="info">
                    <i class="fas fa-folder-open"></i> Load Config
                </button>
            </div>
            
            <div class="grid">
                <div>
                    <label for="prng-algorithm">PRNG Algorithm:</label>
                    <select id="prng-algorithm">
                        <option value="lcg">Linear Congruential Generator (LCG)</option>
                        <option value="mt">Mersenne Twister</option>
                        <option value="xorshift">Xorshift</option>
                        <option value="pcg">PCG (Permuted Congruential Generator)</option>
                        <option value="mulberry32">Mulberry32</option>
                        <option value="sfc32">sfc32 (Small Fast Counter)</option>
                        <option value="jsf32">jsf32 (Jenkins' Small Fast)</option>
                        <option value="enhanced-crypto">Enhanced Cryptographic PRNG</option>
                        <option value="aes-ctr">AES-CTR (Cryptographic)</option>
                        <option value="hmac-drbg">HMAC-DRBG (NIST SP 800-90A)</option>
                    </select>
                    
                    <div id="lcg-params">
                        <label for="lcg-multiplier">Multiplier (a):</label>
                        <input type="number" id="lcg-multiplier" value="1664525">
                        
                        <label for="lcg-increment">Increment (c):</label>
                        <input type="number" id="lcg-increment" value="1013904223">
                        
                        <label for="lcg-modulus">Modulus (m):</label>
                        <input type="number" id="lcg-modulus" value="4294967296">
                    </div>
                    
                    <label for="prng-seed">Seed:</label>
                    <input type="number" id="prng-seed" value="12345">
                    
                    <label for="prng-count">Number of values to generate:</label>
                    <input type="number" id="prng-count" value="100" min="1" max="10000">
                    
                    <label for="prng-range">Output range (min, max):</label>
                    <div class="grid">
                        <div>
                            <input type="number" id="prng-min" value="0" placeholder="Min">
                        </div>
                        <div>
                            <input type="number" id="prng-max" value="100" placeholder="Max">
                        </div>
                    </div>
                    
                    <div class="action-buttons">
                        <button onclick="generatePRNGNumbers()" class="success">
                            <i class="fas fa-play"></i> Generate
                        </button>
                        <button onclick="clearPRNGGeneration()" class="secondary">
                            <i class="fas fa-trash"></i> Clear
                        </button>
                        <button onclick="randomizePRNGParams()" class="info">
                            <i class="fas fa-dice"></i> Randomize
                        </button>
                    </div>
                </div>
                
                <div>
                    <label>Generated Numbers:</label>
                    <textarea id="prng-generated-numbers" rows="10" readonly></textarea>
                    
                    <div class="export-buttons">
                        <button onclick="exportPRNGNumbers('txt')" class="secondary">
                            <i class="fas fa-file-alt"></i> Export as TXT
                        </button>
                        <button onclick="exportPRNGNumbers('csv')" class="secondary">
                            <i class="fas fa-file-csv"></i> Export as CSV
                        </button>
                        <button onclick="exportPRNGNumbers('json')" class="secondary">
                            <i class="fas fa-file-code"></i> Export as JSON
                        </button>
                        <button onclick="copyPRNGNumbers()" class="secondary">
                            <i class="fas fa-copy"></i> Copy to Clipboard
                        </button>
                    </div>
                    
                    <div class="result" id="prng-stats">
                        <strong>Statistics:</strong>
                        <div id="prng-stats-content"></div>
                    </div>
                </div>
            </div>
            
            <div class="algorithm-info">
                <h3>Algorithm Information</h3>
                <div id="prng-algorithm-info"></div>
            </div>
        </div>
        
        <!-- PRNG Reverse Engineer Tab -->
        <div id="prng-reverse" class="tab-content">
            <div class="grid">
                <div>
                    <label for="reverse-prng-algorithm">PRNG Algorithm:</label>
                    <select id="reverse-prng-algorithm">
                        <option value="lcg">Linear Congruential Generator (LCG)</option>
                        <option value="xorshift32">Xorshift32</option>
                        <option value="mulberry32">Mulberry32</option>
                        <option value="sfc32">sfc32</option>
                    </select>
                    
                    <label for="prng-target-numbers">Observed Numbers (one per line):</label>
                    <textarea id="prng-target-numbers" rows="5" placeholder="Enter at least 3 consecutive numbers for reliable analysis"></textarea>
                    
                    <div id="reverse-prng-params" style="display: none;">
                        <label for="known-multiplier">Known Multiplier (a):</label>
                        <input type="number" id="known-multiplier">
                        
                        <label for="known-increment">Known Increment (c):</label>
                        <input type="number" id="known-increment">
                        
                        <label for="known-modulus">Known Modulus (m):</label>
                        <input type="number" id="known-modulus">
                    </div>
                    
                    <div class="status info" id="prng-reverse-status">
                        Enter observed numbers to begin reverse engineering. More numbers increase accuracy.
                    </div>
                    
                    <div class="progress-container" id="prng-reverse-progress" style="display: none;">
                        <div class="progress-bar" id="prng-progress-bar"></div>
                    </div>
                    
                    <div class="action-buttons">
                        <button onclick="reverseEngineerPRNG()" class="warning">
                            <i class="fas fa-search"></i> Reverse Engineer Seed
                        </button>
                        <button onclick="stopPRNGReverseEngineer()" class="danger" id="prng-stop-button" style="display: none;">
                            <i class="fas fa-stop"></i> Stop
                        </button>
                        <button onclick="clearPRNGReverse()" class="secondary">
                            <i class="fas fa-trash"></i> Clear
                        </button>
                        <button onclick="samplePRNGData()" class="info">
                            <i class="fas fa-file-alt"></i> Load Sample Data
                        </button>
                    </div>
                </div>
                
                <div>
                    <label>Possible Seeds:</label>
                    <div class="result" id="prng-seed-results">
                        Seed candidates will appear here after analysis.
                    </div>
                    
                    <label>Numbers Generated from Found Seeds:</label>
                    <textarea id="prng-seed-verification" rows="5" readonly></textarea>
                    
                    <div id="prng-predictions">
                        <h4>Prediction Analysis</h4>
                        <div id="prng-predictions-content"></div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Lotto Generator Tab -->
        <div id="lotto-generate" class="tab-content">
            <div class="config-buttons">
                <button onclick="saveLottoConfig()" class="info">
                    <i class="fas fa-save"></i> Save Config
                </button>
                <button onclick="loadLottoConfig()" class="info">
                    <i class="fas fa-folder-open"></i> Load Config
                </button>
            </div>
            
            <div class="grid">
                <div>
                    <label for="lotto-game-type">Lottery Game:</label>
                    <select id="lotto-game-type">
                        <option value="powerball">Powerball (5/69 + 1/26)</option>
                        <option value="megamillions">Mega Millions (5/70 + 1/25)</option>
                        <option value="euromillions">EuroMillions (5/50 + 2/12)</option>
                        <option value="lotto649">Lotto 6/49</option>
                        <option value="custom">Custom Game</option>
                    </select>
                    
                    <div id="lotto-custom-params" style="display: none;">
                        <div class="grid">
                            <div>
                                <label for="lotto-main-numbers">Main Numbers Pool:</label>
                                <input type="number" id="lotto-main-numbers" min="1" value="69">
                            </div>
                            <div>
                                <label for="lotto-pick-numbers">Numbers to Pick:</label>
                                <input type="number" id="lotto-pick-numbers" min="1" value="5">
                            </div>
                        </div>
                        <div class="grid">
                            <div>
                                <label for="lotto-bonus-numbers">Bonus Numbers Pool:</label>
                                <input type="number" id="lotto-bonus-numbers" min="0" value="26">
                            </div>
                            <div>
                                <label for="lotto-pick-bonus">Bonus Numbers to Pick:</label>
                                <input type="number" id="lotto-pick-bonus" min="0" value="1">
                            </div>
                        </div>
                    </div>
                    
                    <label for="lotto-seed">Seed (leave empty for random):</label>
                    <input type="number" id="lotto-seed">
                    
                    <label for="lotto-draw-count">Number of draws:</label>
                    <input type="number" id="lotto-draw-count" min="1" value="5" max="1000">
                    
                    <div class="action-buttons">
                        <button onclick="generateLottoNumbers()" class="success">
                            <i class="fas fa-play"></i> Generate
                        </button>
                        <button onclick="clearLottoGeneration()" class="secondary">
                            <i class="fas fa-trash"></i> Clear
                        </button>
                        <button onclick="randomizeLottoSeed()" class="info">
                            <i class="fas fa-dice"></i> Random Seed
                        </button>
                    </div>
                </div>
                
                <div>
                    <label>Generated Numbers:</label>
                    <div id="lotto-generated-results"></div>
                    
                    <div class="export-buttons">
                        <button onclick="exportLottoNumbers('txt')" class="secondary">
                            <i class="fas fa-file-alt"></i> Export as TXT
                        </button>
                        <button onclick="exportLottoNumbers('csv')" class="secondary">
                            <i class="fas fa-file-csv"></i> Export as CSV
                        </button>
                        <button onclick="exportLottoNumbers('json')" class="secondary">
                            <i class="fas fa-file-code"></i> Export as JSON
                        </button>
                        <button onclick="copyLottoNumbers()" class="secondary">
                            <i class="fas fa-copy"></i> Copy to Clipboard
                        </button>
                    </div>
                    
                    <div class="result">
                        <strong>Generation Details:</strong>
                        <div id="lotto-gen-details"></div>
                    </div>
                    
                    <div id="lotto-frequency-analysis">
                        <h4>Frequency Analysis</h4>
                        <div id="lotto-frequency-content"></div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Lotto Reverse Engineer Tab (Improved Version) -->
        <div id="lotto-reverse" class="tab-content">
            <div class="grid">
                <div>
                    <label for="lotto-reverse-game-type">Lottery Game:</label>
                    <select id="lotto-reverse-game-type" onchange="updateLottoReverseParams()">
                        <option value="powerball">Powerball (5/69 + 1/26)</option>
                        <option value="megamillions">Mega Millions (5/70 + 1/25)</option>
                        <option value="euromillions">EuroMillions (5/50 + 2/12)</option>
                        <option value="custom-reverse">Custom Game</option>
                    </select>
                    
                    <div id="lotto-custom-reverse-params" style="display: none;">
                        <div class="grid">
                            <div>
                                <label for="lotto-reverse-main-numbers">Main Numbers Pool:</label>
                                <input type="number" id="lotto-reverse-main-numbers" min="1" value="69">
                            </div>
                            <div>
                                <label for="lotto-reverse-pick-numbers">Numbers to Pick:</label>
                                <input type="number" id="lotto-reverse-pick-numbers" min="1" value="5">
                            </div>
                        </div>
                        <div class="grid">
                            <div>
                                <label for="lotto-reverse-bonus-numbers">Bonus Numbers Pool:</label>
                                <input type="number" id="lotto-reverse-bonus-numbers" min="0" value="26">
                            </div>
                            <div>
                                <label for="lotto-reverse-pick-bonus">Bonus Numbers to Pick:</label>
                                <input type="number" id="lotto-reverse-pick-bonus" min="0" value="1">
                            </div>
                        </div>
                    </div>
                    
                    <label for="lotto-observed-numbers">Observed Numbers (one draw per line, format: 1,2,3,4,5|1):</label>
                    <textarea id="lotto-observed-numbers" rows="5" placeholder="Example for Powerball:
3, 17, 25, 36, 55 | 12
5, 10, 20, 30, 40 | 15"></textarea>
                    
                    <label for="lotto-reverse-range">Seed search range:</label>
                    <div class="grid">
                        <div>
                            <input type="number" id="lotto-reverse-min" value="0" placeholder="Min seed">
                        </div>
                        <div>
                            <input type="number" id="lotto-reverse-max" value="100000" placeholder="Max seed">
                        </div>
                    </div>
                    
                    <label for="lotto-predict-count">Number of future draws to predict:</label>
                    <input type="number" id="lotto-predict-count" min="1" value="5" max="20">
                    
                    <div class="status info" id="lotto-reverse-status">
                        Enter observed numbers to begin reverse engineering. More draws increase accuracy.
                    </div>
                    
                    <div class="progress-container" id="lotto-reverse-progress" style="display: none;">
                        <div class="progress-bar" id="lotto-progress-bar"></div>
                    </div>
                    
                    <div class="action-buttons">
                        <button onclick="reverseEngineerLottoSeed()" class="warning">
                            <i class="fas fa-search"></i> Reverse Engineer Seed
                        </button>
                        <button onclick="stopLottoReverseEngineer()" class="danger" id="lotto-stop-button" style="display: none;">
                            <i class="fas fa-stop"></i> Stop
                        </button>
                        <button onclick="verifyLottoSeed()" class="info">
                            <i class="fas fa-check"></i> Verify Seed
                        </button>
                        <button onclick="clearLottoReverse()" class="secondary">
                            <i class="fas fa-trash"></i> Clear
                        </button>
                        <button onclick="sampleLottoData()" class="info">
                            <i class="fas fa-file-alt"></i> Load Sample Data
                        </button>
                    </div>
                </div>
                
                <div>
                    <label>Reverse Engineering Results:</label>
                    <div class="result" id="lotto-reverse-results">
                        Results will appear here after analysis.
                    </div>
                    
                    <label>Verification:</label>
                    <div id="lotto-verification-results"></div>
                    
                    <div id="lotto-predictions">
                        <h4>Predicted Future Draws</h4>
                        <div id="lotto-predictions-content"></div>
                    </div>
                    
                    <div id="lotto-frequency-analysis">
                        <h4>Frequency Analysis</h4>
                        <div id="lotto-frequency-content"></div>
                    </div>
                    
                    <div id="lotto-statistics">
                        <h4>Statistical Analysis</h4>
                        <div id="lotto-statistics-content"></div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Compare Tab -->
        <div id="compare" class="tab-content">
            <div class="grid">
                <div>
                    <label for="compare-mode">Comparison Mode:</label>
                    <select id="compare-mode">
                        <option value="prng">PRNG Sequences</option>
                        <option value="lotto">Lotto Draws</option>
                    </select>
                    
                    <!-- PRNG Compare Fields -->
                    <div id="prng-compare-fields">
                        <label for="compare-prng-seed">Seed to compare:</label>
                        <input type="number" id="compare-prng-seed">
                        
                        <label for="compare-prng-count">Number of values to generate:</label>
                        <input type="number" id="compare-prng-count" min="1" value="10">
                        
                        <label for="compare-prng-observed">Observed Numbers (one per line):</label>
                        <textarea id="compare-prng-observed" rows="5"></textarea>
                    </div>
                    
                    <!-- Lotto Compare Fields -->
                    <div id="lotto-compare-fields" style="display: none;">
                        <label for="compare-lotto-seed">Seed to compare:</label>
                        <input type="number" id="compare-lotto-seed">
                        
                        <label for="compare-lotto-draws">Number of draws to generate:</label>
                        <input type="number" id="compare-lotto-draws" min="1" value="10">
                        
                        <label for="compare-lotto-observed">Observed Numbers (one draw per line):</label>
                        <textarea id="compare-lotto-observed" rows="5"></textarea>
                    </div>
                    
                    <button onclick="compareSequences()" class="success">Compare</button>
                    <button onclick="clearComparison()" class="secondary">Clear</button>
                </div>
                
                <div>
                    <label>Comparison Results:</label>
                    <div class="result" id="compare-results">
                        Results will appear here after comparison.
                    </div>
                    
                    <label>Match Statistics:</label>
                    <div class="result" id="compare-stats">
                        Statistics will appear here after comparison.
                    </div>
                    
                    <div id="compare-visualization"></div>
                </div>
            </div>
        </div>
        
        <!-- Visualization Tab -->
        <div id="visualization" class="tab-content">
            <div class="grid">
                <div>
                    <label for="visualization-type">Visualization Type:</label>
                    <select id="visualization-type">
                        <option value="histogram">Histogram</option>
                        <option value="scatter">Scatter Plot</option>
                        <option value="autocorrelation">Autocorrelation</option>
                        <option value="frequency">Frequency Chart</option>
                        <option value="boxplot">Box Plot</option>
                    </select>
                    
                    <label for="visualization-data">Data to visualize:</label>
                    <textarea id="visualization-data" rows="5" placeholder="Enter numbers to visualize, one per line"></textarea>
                    
                    <button onclick="generateVisualization()" class="success">Generate Visualization</button>
                    <button onclick="clearVisualization()" class="secondary">Clear</button>
                    <button onclick="sampleVisualizationData()" class="info">Sample Data</button>
                </div>
                
                <div>
                    <div id="visualization-container" style="width: 100%; height: 400px;">
                        <canvas id="visualization-canvas"></canvas>
                    </div>
                    
                    <div class="result" id="visualization-stats">
                        <strong>Visualization Statistics:</strong>
                        <div id="visualization-stats-content"></div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Crypto Predictor Tab -->
        <div id="crypto-predictor" class="tab-content">
            <div class="grid">
                <div>
                    <h3>Cryptographic PRNG Predictor (Educational)</h3>
                    <p class="status warning">
                        Note: This is for educational purposes only. True cryptographic PRNGs cannot be predicted.
                        This demonstrates how non-cryptographic PRNGs might be vulnerable.
                    </p>
                    
                    <label for="crypto-predictor-algorithm">Algorithm to test:</label>
                    <select id="crypto-predictor-algorithm">
                        <option value="lcg">Linear Congruential Generator (LCG)</option>
                        <option value="xorshift">Xorshift</option>
                        <option value="mt">Mersenne Twister</option>
                        <option value="aes-ctr">AES-CTR</option>
                        <option value="hmac-drbg">HMAC-DRBG</option>
                        <option value="crypto">Browser Crypto (for comparison)</option>
                    </select>
                    
                    <label for="crypto-predictor-count">Numbers to generate:</label>
                    <input type="number" id="crypto-predictor-count" value="100" min="10" max="1000">
                    
                    <label for="crypto-predictor-known">Known numbers (for prediction):</label>
                    <input type="number" id="crypto-predictor-known" value="10" min="1" max="50">
                    
                    <button onclick="runCryptoPrediction()" class="warning">Run Prediction Test</button>
                    <button onclick="clearCryptoPrediction()" class="secondary">Clear</button>
                </div>
                
                <div>
                    <div class="result">
                        <h4>Prediction Results</h4>
                        <div id="crypto-predictor-results"></div>
                    </div>
                    
                    <div id="crypto-predictor-chart-container" style="height: 300px;">
                        <canvas id="crypto-predictor-chart"></canvas>
                    </div>
                    
                    <div class="algorithm-info">
                        <h4>How This Works</h4>
                        <p>This tool demonstrates how different PRNG algorithms can be vulnerable to prediction:</p>
                        <ul>
                            <li><strong>LCG:</strong> Can often be completely predicted with just 3 values</li>
                            <li><strong>Xorshift:</strong> Can usually be predicted with enough consecutive values</li>
                            <li><strong>Mersenne Twister:</strong> More difficult but still predictable with enough values</li>
                            <li><strong>AES-CTR/HMAC-DRBG:</strong> Should be completely unpredictable regardless of input size</li>
                            <li><strong>Crypto:</strong> Browser's cryptographic PRNG for comparison</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card">
            <h2>Algorithm Documentation</h2>
            <div class="grid">
                <div>
                    <h3>PRNG Algorithms</h3>
                    <div class="algorithm-info">
                        <h4>Linear Congruential Generator (LCG)</h4>
                        <p>One of the oldest and simplest PRNG algorithms defined by the recurrence relation:</p>
                        <p><strong>X<sub>n+1</sub> = (a × X<sub>n</sub> + c) mod m</strong></p>
                        <p>Where:</p>
                        <ul>
                            <li>X is the sequence of pseudo-random values</li>
                            <li>a is the multiplier</li>
                            <li>c is the increment</li>
                            <li>m is the modulus</li>
                        </ul>
                        <p class="status warning">Warning: LCGs are not cryptographically secure and can be predictable with enough output.</p>
                    </div>
                    
                    <div class="algorithm-info">
                        <h4>Mersenne Twister</h4>
                        <p>A widely used PRNG with a period of 2<sup>19937</sup>-1. Provides fast generation of high-quality pseudo-random numbers.</p>
                        <p>Advantages:</p>
                        <ul>
                            <li>Very long period</li>
                            <li>Good statistical properties</li>
                            <li>Fast generation</li>
                        </ul>
                        <p>Used in many programming languages and applications including Python, Ruby, PHP, and more.</p>
                    </div>
                    
                    <div class="algorithm-info">
                        <h4>AES-CTR PRNG (Cryptographic)</h4>
                        <p>Uses the Advanced Encryption Standard in Counter mode to generate cryptographically secure random numbers.</p>
                        <p>Features:</p>
                        <ul>
                            <li>Cryptographically secure</li>
                            <li>Very fast in modern browsers with hardware acceleration</li>
                            <li>Period of 2^128 (effectively infinite for practical purposes)</li>
                            <li>Resistant to prediction even when partial state is known</li>
                        </ul>
                        <p class="status success">Suitable for security-sensitive applications.</p>
                    </div>
                    
                    <div class="algorithm-info">
                        <h4>HMAC-DRBG (NIST SP 800-90A)</h4>
                        <p>Deterministic Random Bit Generator using HMAC, as specified in NIST SP 800-90A.</p>
                        <p>Features:</p>
                        <ul>
                            <li>NIST-approved cryptographic PRNG</li>
                            <li>Periodically reseeds itself for forward secrecy</li>
                            <li>Designed to resist cryptographic attacks</li>
                            <li>Automatic reseeding after 10,000 requests</li>
                        </ul>
                        <p class="status success">Suitable for high-security applications including cryptography.</p>
                    </div>
                </div>
                
                <div>
                    <h3>Prediction Analysis</h3>
                    <div class="algorithm-info">
                        <h4>PRNG Prediction</h4>
                        <p>The ability to predict future outputs of a PRNG given previous outputs varies greatly by algorithm:</p>
                        <ul>
                            <li><strong>Simple PRNGs (LCG):</strong> Can often be completely predicted with just 3 sequential values</li>
                            <li><strong>Medium PRNGs (Xorshift):</strong> Require more values but can still be predicted</li>
                            <li><strong>Complex PRNGs (Mersenne Twister):</strong> Require significant computation but are still predictable</li>
                            <li><strong>Cryptographic PRNGs (AES-CTR, HMAC-DRBG):</strong> Should be completely unpredictable regardless of input size</li>
                        </ul>
                        <p class="status warning">Important: Never use predictable PRNGs for security-sensitive applications like cryptography, gambling, or financial systems.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div id="toast" class="toast"></div>
    
    <script>
        // Global variables
        let prngReverseWorker;
        let lottoReverseWorker;
        let visualizationChart = null;
        let cryptoPredictorChart = null;
        let cryptoPredictionWorker = null;

        // DOM Ready
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize theme
            initTheme();
            
            // Set up event listeners
            document.getElementById('prng-algorithm').addEventListener('change', updateAlgorithmParams);
            document.getElementById('lotto-game-type').addEventListener('change', updateLottoParams);
            document.getElementById('lotto-reverse-game-type').addEventListener('change', updateLottoReverseParams);
            document.getElementById('compare-mode').addEventListener('change', updateCompareFields);
            
            // Initialize algorithm info
            updateAlgorithmParams();
            
            // Load sample data for visualization
            sampleVisualizationData();
            
            // Set up tab switching
            setupTabs();
        });

        // Tab functionality
        function setupTabs() {
            const tabs = document.querySelectorAll('.tab');
            tabs.forEach(tab => {
                tab.addEventListener('click', function() {
                    // Remove active class from all tabs and contents
                    document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
                    document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
                    
                    // Add active class to clicked tab
                    this.classList.add('active');
                    
                    // Show corresponding content
                    const tabId = this.getAttribute('data-tab');
                    document.getElementById(tabId).classList.add('active');
                });
            });
        }

        // Theme functionality
        function initTheme() {
            const themeToggle = document.getElementById('themeToggle');
            const currentTheme = localStorage.getItem('theme') || 'light';
            
            document.documentElement.setAttribute('data-theme', currentTheme);
            
            themeToggle.addEventListener('click', () => {
                const currentTheme = document.documentElement.getAttribute('data-theme');
                const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
                document.documentElement.setAttribute('data-theme', newTheme);
                localStorage.setItem('theme', newTheme);
            });
        }
        
        // Toast notification
        function showToast(message, type = 'success') {
            const toast = document.getElementById('toast');
            toast.textContent = message;
            toast.className = `toast show`;
            toast.style.backgroundColor = `var(--${type})`;
            
            setTimeout(() => {
                toast.className = 'toast';
            }, 3000);
        }
         
        // PRNG Generator Functions
        function updateAlgorithmParams() {
            const algorithm = document.getElementById('prng-algorithm').value;
            const lcgParams = document.getElementById('lcg-params');
            const seedInput = document.getElementById('prng-seed');
            
            if (algorithm === 'lcg') {
                lcgParams.style.display = 'block';
                seedInput.disabled = false;
                if (seedInput.value === 'N/A (not used)') {
                    seedInput.value = '12345';
                }
            } else if (algorithm === 'enhanced-crypto' || algorithm === 'aes-ctr' || algorithm === 'hmac-drbg') {
                lcgParams.style.display = 'none';
                seedInput.disabled = true;
                seedInput.value = 'N/A (not used)';
            } else {
                lcgParams.style.display = 'none';
                seedInput.disabled = false;
                if (seedInput.value === 'N/A (not used)') {
                    seedInput.value = '12345';
                }
            }
            
            updateAlgorithmInfo();
        }

        function updateAlgorithmInfo() {
            const algorithm = document.getElementById('prng-algorithm').value;
            let info = '';
            
            switch(algorithm) {
                case 'lcg':
                    info = `
                        <h4>Linear Congruential Generator (LCG)</h4>
                        <p>One of the oldest and simplest PRNG algorithms defined by the recurrence relation:</p>
                        <p><strong>X<sub>n+1</sub> = (a × X<sub>n</sub> + c) mod m</strong></p>
                        <p>Where:</p>
                        <ul>
                            <li>X is the sequence of pseudo-random values</li>
                            <li>a is the multiplier</li>
                            <li>c is the increment</li>
                            <li>m is the modulus</li>
                        </ul>
                        <p class="status warning">Warning: LCGs are not cryptographically secure and can be predictable with enough output.</p>
                    `;
                    break;
                case 'mt':
                    info = `
                        <h4>Mersenne Twister</h4>
                        <p>A widely used PRNG with a period of 2<sup>19937</sup>-1. Provides fast generation of high-quality pseudo-random numbers.</p>
                        <p>Advantages:</p>
                        <ul>
                            <li>Very long period</li>
                            <li>Good statistical properties</li>
                            <li>Fast generation</li>
                        </ul>
                        <p>Used in many programming languages including Python, Ruby, PHP, and more.</p>
                    `;
                    break;
                case 'xorshift':
                    info = `
                        <h4>Xorshift</h4>
                        <p>A class of PRNGs that use exclusive or and bit shifts. Very fast and with good statistical properties.</p>
                        <p>Basic algorithm (32-bit version):</p>
                        <div class="code">
                            x ^= x << 13;<br>
                            x ^= x >> 17;<br>
                            x ^= x << 5;
                        </div>
                        <p>Period is 2<sup>32</sup>-1 for the 32-bit version.</p>
                    `;
                    break;
                case 'pcg':
                    info = `
                        <h4>PCG (Permuted Congruential Generator)</h4>
                        <p>A family of PRNGs that combine LCGs with permutation functions to improve output quality.</p>
                        <p>Features:</p>
                        <ul>
                            <li>Excellent statistical properties</li>
                            <li>Small memory footprint</li>
                            <li>Predictable advancement (useful for simulations)</li>
                            <li>Multiple output variations</li>
                        </ul>
                    `;
                    break;
                case 'mulberry32':
                    info = `
                        <h4>Mulberry32</h4>
                        <p>A simple 32-bit PRNG with good distribution properties.</p>
                        <p>Algorithm:</p>
                        <div class="code">
                            function mulberry32(a) {<br>
                            &nbsp;&nbsp;a += 0x6D2B79F5;<br>
                            &nbsp;&nbsp;let t = Math.imul(a ^ a >>> 15, 1 | a);<br>
                            &nbsp;&nbsp;t = t + Math.imul(t ^ t >>> 7, 61 | t) ^ t;<br>
                            &nbsp;&nbsp;return ((t ^ t >>> 14) >>> 0) / 4294967296;<br>
                            }
                        </div>
                    `;
                    break;
                case 'sfc32':
                    info = `
                        <h4>sfc32 (Small Fast Counter)</h4>
                        <p>A 32-bit PRNG that is part of the PractRand random number testing suite.</p>
                        <p>Algorithm:</p>
                        <div class="code">
                            function sfc32(a, b, c, d) {<br>
                            &nbsp;&nbsp;a >>>= 0; b >>>= 0; c >>>= 0; d >>>= 0;<br>
                            &nbsp;&nbsp;let t = (a + b) | 0;<br>
                            &nbsp;&nbsp;a = b ^ b >>> 9;<br>
                            &nbsp;&nbsp;b = c + (c << 3) | 0;<br>
                            &nbsp;&nbsp;c = (c << 21 | c >>> 11);<br>
                            &nbsp;&nbsp;d = d + 1 | 0;<br>
                            &nbsp;&nbsp;t = t + d | 0;<br>
                            &nbsp;&nbsp;c = c + t | 0;<br>
                            &nbsp;&nbsp;return (t >>> 0) / 4294967296;<br>
                            }
                        </div>
                    `;
                    break;
                case 'jsf32':
                    info = `
                        <h4>jsf32 (Jenkins' Small Fast)</h4>
                        <p>Bob Jenkins' small fast (non-cryptographic) PRNG.</p>
                        <p>Algorithm:</p>
                        <div class="code">
                            function jsf32(a, b, c, d) {<br>
                            &nbsp;&nbsp;a |= 0; b |= 0; c |= 0; d |= 0;<br>
                            &nbsp;&nbsp;let t = a - (b << 27 | b >>> 5) | 0;<br>
                            &nbsp;&nbsp;a = b ^ (c << 17 | c >>> 15);<br>
                            &nbsp;&nbsp;b = c + d | 0;<br>
                            &nbsp;&nbsp;c = d + t | 0;<br>
                            &nbsp;&nbsp;d = a + t | 0;<br>
                            &nbsp;&nbsp;return ((d >>> 0) / 4294967296);<br>
                            }
                        </div>
                    `;
                    break;
                case 'enhanced-crypto':
                    info = `
                        <h4>Enhanced Cryptographic PRNG</h4>
                        <p>Uses the browser's built-in cryptographic functions with additional entropy sources to generate truly random numbers suitable for security-sensitive applications.</p>
                        <p>Features:</p>
                        <ul>
                            <li>Combines system crypto entropy with timing and mouse movement data</li>
                            <li>Periodic reseeding for forward secrecy</li>
                            <li>Uses SHA-512 for entropy mixing</li>
                            <li>Suitable for cryptographic operations</li>
                        </ul>
                        <p class="status success">This is the most secure option for applications requiring unpredictable random numbers.</p>
                    `;
                    break;
                case 'aes-ctr':
                    info = `
                        <h4>AES-CTR PRNG (Cryptographic)</h4>
                        <p>Uses the Advanced Encryption Standard in Counter mode to generate cryptographically secure random numbers.</p>
                        <p>Features:</p>
                        <ul>
                            <li>Cryptographically secure</li>
                            <li>Very fast in modern browsers with hardware acceleration</li>
                            <li>Period of 2^128 (effectively infinite for practical purposes)</li>
                            <li>Resistant to prediction even when partial state is known</li>
                        </ul>
                        <p class="status success">Suitable for security-sensitive applications.</p>
                    `;
                    break;
                case 'hmac-drbg':
                    info = `
                        <h4>HMAC-DRBG (NIST SP 800-90A)</h4>
                        <p>Deterministic Random Bit Generator using HMAC, as specified in NIST SP 800-90A.</p>
                        <p>Features:</p>
                        <ul>
                            <li>NIST-approved cryptographic PRNG</li>
                            <li>Periodically reseeds itself for forward secrecy</li>
                            <li>Designed to resist cryptographic attacks</li>
                            <li>Automatic reseeding after 10,000 requests</li>
                        </ul>
                        <p class="status success">Suitable for high-security applications including cryptography.</p>
                    `;
                    break;
            }
            
            document.getElementById('prng-algorithm-info').innerHTML = info;
        }

        async function generatePRNGNumbers() {
            const algorithm = document.getElementById('prng-algorithm').value;
            const seed = parseInt(document.getElementById('prng-seed').value) || Math.floor(Math.random() * 1000000);
            const count = parseInt(document.getElementById('prng-count').value) || 100;
            const min = parseInt(document.getElementById('prng-min').value) || 0;
            const max = parseInt(document.getElementById('prng-max').value) || 100;
            
            if (min >= max) {
                showToast('Max value must be greater than min value', 'danger');
                return;
            }
            
            let numbers = [];
            let generator;
            
            try {
                switch(algorithm) {
                    case 'lcg':
                        const multiplier = parseInt(document.getElementById('lcg-multiplier').value) || 1664525;
                        const increment = parseInt(document.getElementById('lcg-increment').value) || 1013904223;
                        const modulus = parseInt(document.getElementById('lcg-modulus').value) || 4294967296;
                        
                        generator = lcg(multiplier, increment, modulus, seed);
                        break;
                    case 'mt':
                        generator = mersenneTwister(seed);
                        break;
                    case 'xorshift':
                        generator = xorshift(seed);
                        break;
                    case 'pcg':
                        generator = pcg(seed);
                        break;
                    case 'mulberry32':
                        generator = mulberry32(seed);
                        break;
                    case 'sfc32':
                        generator = sfc32(seed, seed + 1, seed + 2, seed + 3);
                        break;
                    case 'jsf32':
                        generator = jsf32(seed, seed + 1, seed + 2, seed + 3);
                        break;
                    case 'enhanced-crypto':
                        const enhancedCrypto = new EnhancedCryptoPRNG(parseInt(document.getElementById('prng-seed').value) || undefined);
                        generator = enhancedCrypto.createGenerator();
                        break;
                    case 'aes-ctr':
                        const aesPrng = new AesCtrPRNG(seed);
                        generator = () => aesPrng.next();
                        break;
                    case 'hmac-drbg':
                        const hmacPrng = new HmacDrbg(seed);
                        generator = () => hmacPrng.next();
                        break;
                    default:
                        generator = lcg(1664525, 1013904223, 4294967296, seed);
                }
                
                // Handle async generators differently
                if (algorithm === 'enhanced-crypto' || algorithm === 'aes-ctr' || algorithm === 'hmac-drbg') {
                    document.getElementById('prng-generated-numbers').value = 'Generating secure numbers...';
                    
                    for (let i = 0; i < count; i++) {
                        const randomValue = await generator();
                        const scaledValue = Math.floor(randomValue * (max - min + 1)) + min;
                        numbers.push(scaledValue);
                        
                        // Update progress every 10 numbers
                        if (i % 10 === 0 || i === count - 1) {
                            document.getElementById('prng-generated-numbers').value = numbers.join('\n');
                            await new Promise(resolve => setTimeout(resolve, 0));
                        }
                    }
                    
                    calculatePRNGStats(numbers);
                    showToast('Secure random numbers generated successfully', 'success');
                } else {
                    for (let i = 0; i < count; i++) {
                        const randomValue = generator();
                        const scaledValue = Math.floor(randomValue * (max - min + 1)) + min;
                        numbers.push(scaledValue);
                    }
                    
                    document.getElementById('prng-generated-numbers').value = numbers.join('\n');
                    calculatePRNGStats(numbers);
                    showToast('Random numbers generated successfully', 'success');
                }
            } catch (error) {
                document.getElementById('prng-generated-numbers').value = 'Error generating numbers: ' + error.message;
                showToast('Error generating numbers: ' + error.message, 'danger');
            }
        }

        // Advanced Cryptographic PRNG Implementations

        /**
         * AES-CTR based PRNG
         * Uses Web Crypto API for cryptographic strength randomness
         */
        class AesCtrPRNG {
            constructor(seed) {
                this.keyPromise = this.importKey(seed);
                this.counter = 0;
                this.buffer = new Uint8Array(0);
                this.bufferPos = 0;
            }

            async importKey(seed) {
                // Use seed as key material if provided, otherwise generate random key
                let keyMaterial;
                if (seed) {
                    const seedBuffer = new TextEncoder().encode(seed.toString());
                    keyMaterial = await crypto.subtle.digest('SHA-256', seedBuffer);
                } else {
                    keyMaterial = crypto.getRandomValues(new Uint8Array(32));
                }
                
                return crypto.subtle.importKey(
                    'raw',
                    keyMaterial,
                    { name: 'AES-CTR' },
                    false,
                    ['encrypt']
                );
            }

            async getBytes(count) {
                if (this.bufferPos >= this.buffer.length) {
                    await this.refillBuffer();
                }
                
                const result = this.buffer.slice(this.bufferPos, this.bufferPos + count);
                this.bufferPos += count;
                
                // If we didn't get enough bytes, get more
                if (result.length < count) {
                    const remaining = count - result.length;
                    const moreBytes = await this.getBytes(remaining);
                    const combined = new Uint8Array(result.length + moreBytes.length);
                    combined.set(result);
                    combined.set(moreBytes, result.length);
                    return combined;
                }
                
                return result;
            }

            async refillBuffer() {
                const key = await this.keyPromise;
                const counterBuffer = new ArrayBuffer(16);
                const counterView = new DataView(counterBuffer);
                counterView.setBigUint64(8, BigInt(this.counter++), true);
                
                this.buffer = new Uint8Array(await crypto.subtle.encrypt(
                    {
                        name: 'AES-CTR',
                        counter: counterBuffer,
                        length: 64
                    },
                    key,
                    new Uint8Array(1024) // Generate 1KB at a time
                ));
                
                this.bufferPos = 0;
            }

            async next() {
                const bytes = await this.getBytes(4);
                const value = new DataView(bytes.buffer).getUint32(0, true);
                return value / 4294967296;
            }
        }

        /**
         * HMAC-DRBG implementation (NIST SP 800-90A)
         */
        class HmacDrbg {
            constructor(seed) {
                this.entropy = seed ? this.seedToBytes(seed) : this.getSystemEntropy();
                this.key = new Uint8Array(32); // SHA-256 uses 32-byte keys
                this.value = new Uint8Array(32).fill(1);
                this.reseedCount = 0;
                
                this.instantiate();
            }

            seedToBytes(seed) {
                const encoder = new TextEncoder();
                return encoder.encode(seed.toString());
            }

            getSystemEntropy() {
                const entropy = new Uint8Array(32);
                crypto.getRandomValues(entropy);
                return entropy;
            }

            instantiate() {
                this.update(this.entropy);
                this.reseedCount = 1;
            }

            update(seedMaterial) {
                // Step 1: K = HMAC(K, V || 0x00 || seed_material)
                const temp = new Uint8Array(this.value.length + 1 + (seedMaterial ? seedMaterial.length : 0));
                temp.set(this.value);
                temp[this.value.length] = 0x00;
                if (seedMaterial) {
                                        temp.set(seedMaterial, this.value.length + 1);
                }
                
                this.key = this.hmac(this.key, temp);
                
                // Step 2: V = HMAC(K, V)
                this.value = this.hmac(this.key, this.value);
                
                // Step 3: If seed_material is provided, do another update
                if (seedMaterial) {
                    const temp2 = new Uint8Array(this.value.length + 1 + seedMaterial.length);
                    temp2.set(this.value);
                    temp2[this.value.length] = 0x01;
                    temp2.set(seedMaterial, this.value.length + 1);
                    
                    this.key = this.hmac(this.key, temp2);
                    this.value = this.hmac(this.key, this.value);
                }
            }

            async hmac(key, data) {
                const cryptoKey = await crypto.subtle.importKey(
                    'raw',
                    key,
                    { name: 'HMAC', hash: 'SHA-256' },
                    false,
                    ['sign']
                );
                
                const signature = await crypto.subtle.sign('HMAC', cryptoKey, data);
                return new Uint8Array(signature);
            }

            async next() {
                if (this.reseedCount >= 10000) {
                    this.update(this.getSystemEntropy());
                    this.reseedCount = 0;
                }
                
                this.reseedCount++;
                
                // Generate output
                this.value = await this.hmac(this.key, this.value);
                
                // Convert to number
                const view = new DataView(this.value.buffer);
                const intValue = view.getUint32(0) / 4294967296;
                
                return intValue;
            }
        }

        /**
         * Enhanced cryptographic PRNG that combines multiple entropy sources
         */
        class EnhancedCryptoPRNG {
            constructor(seed) {
                this.entropyPool = new Uint8Array(64);
                this.poolPosition = 0;
                this.seed = seed;
                this.initialized = false;
                
                // Collect initial entropy
                this.addEntropy(crypto.getRandomValues(new Uint8Array(64)));
                if (seed) {
                    this.addEntropy(new TextEncoder().encode(seed.toString()));
                }
                
                // Add mouse movement entropy
                document.addEventListener('mousemove', (e) => {
                    const x = e.clientX;
                    const y = e.clientY;
                    const time = performance.now();
                    
                    const buffer = new ArrayBuffer(12);
                    const view = new DataView(buffer);
                    view.setUint32(0, x);
                    view.setUint32(4, y);
                    view.setFloat64(8, time);
                    
                    this.addEntropy(new Uint8Array(buffer));
                });
                
                // Add timing entropy
                setTimeout(() => {
                    const time = performance.now();
                    const buffer = new ArrayBuffer(8);
                    const view = new DataView(buffer);
                    view.setFloat64(0, time);
                    
                    this.addEntropy(new Uint8Array(buffer));
                }, 0);
            }

            addEntropy(data) {
                // Mix new entropy into the pool using XOR
                for (let i = 0; i < data.length; i++) {
                    this.entropyPool[this.poolPosition] ^= data[i];
                    this.poolPosition = (this.poolPosition + 1) % this.entropyPool.length;
                }
                
                // After initial entropy collection, mark as initialized
                if (!this.initialized && this.poolPosition > 32) {
                    this.initialized = true;
                }
            }

            async createGenerator() {
                // Wait until we have enough entropy
                while (!this.initialized) {
                    await new Promise(resolve => setTimeout(resolve, 10));
                }
                
                // Hash the entropy pool to create a seed
                const seed = await crypto.subtle.digest('SHA-512', this.entropyPool);
                
                // Create a counter-based PRNG using the seed
                const counterPrng = new AesCtrPRNG(new Uint8Array(seed));
                
                return async () => {
                    // Periodically add more entropy
                    if (Math.random() < 0.01) {
                        this.addEntropy(crypto.getRandomValues(new Uint8Array(8)));
                    }
                    
                    return counterPrng.next();
                };
            }
        }

        // Standard PRNG Implementations

        function lcg(multiplier, increment, modulus, seed) {
            let state = seed % modulus;
            if (state < 0) state += modulus;
            
            return function() {
                state = (multiplier * state + increment) % modulus;
                return state / modulus;
            };
        }

        function mersenneTwister(seed) {
            const N = 624;
            const M = 397;
            const MATRIX_A = 0x9908b0df;
            const UPPER_MASK = 0x80000000;
            const LOWER_MASK = 0x7fffffff;
            
            let mt = new Array(N);
            let mti = N + 1;
            
            function init_genrand(s) {
                mt[0] = s >>> 0;
                for (mti = 1; mti < N; mti++) {
                    mt[mti] = (1812433253 * (mt[mti-1] ^ (mt[mti-1] >>> 30)) + mti;
                    mt[mti] >>>= 0;
                }
            }
            
            init_genrand(seed);
            
            return function() {
                let y;
                const mag01 = [0x0, MATRIX_A];
                
                if (mti >= N) {
                    let kk;
                    
                    if (mti == N + 1) {
                        init_genrand(5489);
                    }
                    
                    for (kk = 0; kk < N - M; kk++) {
                        y = (mt[kk] & UPPER_MASK) | (mt[kk+1] & LOWER_MASK);
                        mt[kk] = mt[kk+M] ^ (y >>> 1) ^ mag01[y & 0x1];
                    }
                    
                    for (; kk < N - 1; kk++) {
                        y = (mt[kk] & UPPER_MASK) | (mt[kk+1] & LOWER_MASK);
                        mt[kk] = mt[kk+(M-N)] ^ (y >>> 1) ^ mag01[y & 0x1];
                    }
                    
                    y = (mt[N-1] & UPPER_MASK) | (mt[0] & LOWER_MASK);
                    mt[N-1] = mt[M-1] ^ (y >>> 1) ^ mag01[y & 0x1];
                    
                    mti = 0;
                }
                
                y = mt[mti++];
                
                y ^= (y >>> 11);
                y ^= (y << 7) & 0x9d2c5680;
                y ^= (y << 15) & 0xefc60000;
                y ^= (y >>> 18);
                
                return y / 4294967296;
            };
        }

        function xorshift(seed) {
            let state = seed || 1;
            
            return function() {
                state ^= state << 13;
                state ^= state >> 17;
                state ^= state << 5;
                return (state >>> 0) / 4294967296;
            };
        }

        function pcg(seed) {
            let state = seed || 1;
            const multiplier = 6364136223846793005n;
            const increment = 1442695040888963407n;
            
            return function() {
                const oldstate = BigInt(state);
                state = Number((oldstate * multiplier + increment) & 0xffffffffffffffffn);
                
                const xorshifted = Number(((oldstate >> 18n) ^ oldstate) >> 27n) & 0xffffffff;
                const rot = Number(oldstate >> 59n);
                
                return ((xorshifted >> rot) | (xorshifted << ((-rot) & 31))) / 4294967296;
            };
        }

        function mulberry32(seed) {
            return function() {
                seed += 0x6D2B79F5;
                let t = Math.imul(seed ^ seed >>> 15, 1 | seed);
                t = t + Math.imul(t ^ t >>> 7, 61 | t) ^ t;
                return ((t ^ t >>> 14) >>> 0) / 4294967296;
            };
        }

        function sfc32(a, b, c, d) {
            return function() {
                a >>>= 0; b >>>= 0; c >>>= 0; d >>>= 0; 
                let t = (a + b) | 0;
                a = b ^ b >>> 9;
                b = c + (c << 3) | 0;
                c = (c << 21 | c >>> 11);
                d = d + 1 | 0;
                t = t + d | 0;
                c = c + t | 0;
                return (t >>> 0) / 4294967296;
            };
        }

        function jsf32(a, b, c, d) {
            return function() {
                a |= 0; b |= 0; c |= 0; d |= 0;
                let t = a - (b << 27 | b >>> 5) | 0;
                a = b ^ (c << 17 | c >>> 15);
                b = c + d | 0;
                c = d + t | 0;
                d = a + t | 0;
                return ((d >>> 0) / 4294967296);
            };
        }

        function calculatePRNGStats(numbers) {
            if (!numbers || numbers.length === 0) return;
            
            const sum = numbers.reduce((a, b) => a + b, 0);
            const mean = sum / numbers.length;
            
            const sorted = [...numbers].sort((a, b) => a - b);
            const median = sorted.length % 2 === 0 
                ? (sorted[sorted.length/2 - 1] + sorted[sorted.length/2]) / 2
                : sorted[Math.floor(sorted.length/2)];
                
            const min = sorted[0];
            const max = sorted[sorted.length - 1];
            
            const variance = numbers.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / numbers.length;
            const stdDev = Math.sqrt(variance);
            
            // Count frequency of each number
            const frequency = {};
            numbers.forEach(n => {
                frequency[n] = (frequency[n] || 0) + 1;
            });
            
            // Find most and least common numbers
            const sortedByFrequency = Object.entries(frequency).sort((a, b) => b[1] - a[1]);
            const mostCommon = sortedByFrequency.slice(0, 5);
            const leastCommon = sortedByFrequency.slice(-5).reverse();
            
            let statsHTML = `
                <table class="data-table">
                    <tr><th>Statistic</th><th>Value</th></tr>
                    <tr><td>Count</td><td>${numbers.length}</td></tr>
                    <tr><td>Mean</td><td>${mean.toFixed(4)}</td></tr>
                    <tr><td>Median</td><td>${median.toFixed(4)}</td></tr>
                    <tr><td>Min</td><td>${min}</td></tr>
                    <tr><td>Max</td><td>${max}</td></tr>
                    <tr><td>Standard Deviation</td><td>${stdDev.toFixed(4)}</td></tr>
                    <tr><td>Variance</td><td>${variance.toFixed(4)}</td></tr>
                </table>
                
                <h4>Frequency Analysis</h4>
                <div class="grid">
                    <div>
                        <h5>Most Common Numbers</h5>
                        <table class="data-table">
                            <tr><th>Number</th><th>Count</th></tr>
                            ${mostCommon.map(([num, count]) => `
                                <tr><td>${num}</td><td>${count}</td></tr>
                            `).join('')}
                        </table>
                    </div>
                    <div>
                        <h5>Least Common Numbers</h5>
                        <table class="data-table">
                            <tr><th>Number</th><th>Count</th></tr>
                            ${leastCommon.map(([num, count]) => `
                                <tr><td>${num}</td><td>${count}</td></tr>
                            `).join('')}
                        </table>
                    </div>
                </div>
            `;
            
            document.getElementById('prng-stats-content').innerHTML = statsHTML;
        }

        function clearPRNGGeneration() {
            document.getElementById('prng-generated-numbers').value = '';
            document.getElementById('prng-stats-content').innerHTML = '';
        }

        function randomizePRNGParams() {
            const randomSeed = Math.floor(Math.random() * 1000000);
            document.getElementById('prng-seed').value = randomSeed;
            
            // For LCG, randomize parameters within reasonable bounds
            if (document.getElementById('prng-algorithm').value === 'lcg') {
                document.getElementById('lcg-multiplier').value = Math.floor(Math.random() * 1000000) + 1;
                document.getElementById('lcg-increment').value = Math.floor(Math.random() * 1000000) + 1;
                document.getElementById('lcg-modulus').value = Math.floor(Math.random() * 1000000000) + 1000000;
            }
            
            showToast('Parameters randomized', 'info');
        }

        function exportPRNGNumbers(format) {
            const numbers = document.getElementById('prng-generated-numbers').value;
            if (!numbers.trim()) {
                showToast('No numbers to export', 'warning');
                return;
            }
            
            let content, mimeType, extension;
            const numArray = numbers.split('\n').map(Number);
            
            switch(format) {
                case 'txt':
                    content = numbers;
                    mimeType = 'text/plain';
                    extension = 'txt';
                    break;
                case 'csv':
                    content = 'Index,Value\n' + numArray.map((n, i) => `${i+1},${n}`).join('\n');
                    mimeType = 'text/csv';
                    extension = 'csv';
                    break;
                case 'json':
                    content = JSON.stringify(numArray, null, 2);
                    mimeType = 'application/json';
                    extension = 'json';
                    break;
            }
            
            const blob = new Blob([content], { type: mimeType });
            const url = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = `prng-numbers.${extension}`;
            a.click();
            
            setTimeout(() => {
                URL.revokeObjectURL(url);
            }, 100);
            
            showToast(`Numbers exported as ${format.toUpperCase()}`, 'success');
        }

        function copyPRNGNumbers() {
            const numbers = document.getElementById('prng-generated-numbers');
            numbers.select();
            document.execCommand('copy');
            
            showToast('Numbers copied to clipboard', 'success');
        }

        function savePRNGConfig() {
            const config = {
                algorithm: document.getElementById('prng-algorithm').value,
                seed: document.getElementById('prng-seed').value,
                count: document.getElementById('prng-count').value,
                min: document.getElementById('prng-min').value,
                max: document.getElementById('prng-max').value,
                lcgParams: {
                    multiplier: document.getElementById('lcg-multiplier').value,
                    increment: document.getElementById('lcg-increment').value,
                    modulus: document.getElementById('lcg-modulus').value
                }
            };
            
            const data = JSON.stringify(config, null, 2);
            const blob = new Blob([data], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = 'prng-config.json';
            a.click();
            
            setTimeout(() => {
                URL.revokeObjectURL(url);
            }, 100);
            
            showToast('PRNG configuration saved', 'success');
        }

        function loadPRNGConfig() {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = '.json';
            
            input.onchange = e => {
                const file = e.target.files[0];
                const reader = new FileReader();
                
                reader.onload = event => {
                    try {
                        const config = JSON.parse(event.target.result);
                        
                        document.getElementById('prng-algorithm').value = config.algorithm;
                        document.getElementById('prng-seed').value = config.seed;
                        document.getElementById('prng-count').value = config.count;
                        document.getElementById('prng-min').value = config.min;
                        document.getElementById('prng-max').value = config.max;
                        
                        if (config.lcgParams) {
                            document.getElementById('lcg-multiplier').value = config.lcgParams.multiplier;
                            document.getElementById('lcg-increment').value = config.lcgParams.increment;
                            document.getElementById('lcg-modulus').value = config.lcgParams.modulus;
                        }
                        
                        updateAlgorithmParams();
                        showToast('PRNG configuration loaded', 'success');
                    } catch (error) {
                        showToast('Error loading config: ' + error.message, 'danger');
                    }
                };
                
                reader.readAsText(file);
            };
            
            input.click();
        }

        // PRNG Reverse Engineering Functions

        function reverseEngineerPRNG() {
            const algorithm = document.getElementById('reverse-prng-algorithm').value;
            const targetNumbersText = document.getElementById('prng-target-numbers').value.trim();
            
            if (!targetNumbersText) {
                showToast('Please enter observed numbers', 'warning');
                return;
            }
            
            const targetNumbers = targetNumbersText.split('\n')
                .map(line => line.trim())
                .filter(line => line)
                .map(Number);
                
            if (targetNumbers.some(isNaN)) {
                showToast('Invalid numbers detected', 'danger');
                return;
            }
            
            if (targetNumbers.length < 3) {
                showToast('At least 3 numbers are required for reliable analysis', 'warning');
                return;
            }
            
            // Show progress
            document.getElementById('prng-reverse-progress').style.display = 'block';
            document.getElementById('prng-stop-button').style.display = 'inline-block';
            document.getElementById('prng-reverse-status').className = 'status info';
            document.getElementById('prng-reverse-status').textContent = 'Starting reverse engineering...';
            
            // Use Web Worker for intensive computation
            if (prngReverseWorker) {
                prngReverseWorker.terminate();
            }
            
            prngReverseWorker = new Worker(URL.createObjectURL(new Blob([`
                // Worker implementation of PRNG reverse engineering
                ${lcg.toString()}
                ${xorshift.toString()}
                ${mersenneTwister.toString()}
                ${mulberry32.toString()}
                ${sfc32.toString()}
                
                function reverseLCG(numbers) {
                    // Implementation of LCG parameter recovery
                    // This is a simplified version - real implementation would need more robust math
                    
                    if (numbers.length < 3) {
                        return { error: "At least 3 numbers are required" };
                    }
                    
                    const modulus = 4294967296; // Common modulus for many LCGs
                    
                    // Try to find multiplier and increment
                    const diffs = [];
                    for (let i = 1; i < numbers.length; i++) {
                        diffs.push(numbers[i] - numbers[i-1]);
                    }
                    
                    // Try to find multiplier
                    let multiplier = null;
                    for (let i = 1; i < diffs.length; i++) {
                        if (diffs[i-1] !== 0 && diffs[i] !== 0) {
                            const candidate = (diffs[i] * modInverse(diffs[i-1], modulus)) % modulus;
                            if (multiplier === null) {
                                multiplier = candidate;
                            } else if (multiplier !== candidate) {
                                return { error: "Could not determine consistent multiplier" };
                            }
                        }
                    }
                    
                    if (multiplier === null) {
                        return { error: "Could not determine multiplier" };
                    }
                    
                    // Find increment
                    const increment = (numbers[1] - numbers[0] * multiplier) % modulus;
                    
                    // Verify
                    const gen = lcg(multiplier, increment, modulus, numbers[0]);
                    for (let i = 1; i < numbers.length; i++) {
                        const next = Math.floor(gen() * modulus);
                        if (next !== numbers[i]) {
                            return { error: "Verification failed" };
                        }
                    }
                    
                    return {
                        success: true,
                        multiplier,
                        increment,
                        modulus,
                        seed: numbers[0]
                    };
                }
                
                function modInverse(a, m) {
                    // Extended Euclidean Algorithm for modular inverse
                    a = (a % m + m) % m;
                    let [oldR, r] = [a, m];
                    let [oldS, s] = [1, 0];
                    let [oldT, t] = [0, 1];
                    
                    while (r !== 0) {
                        const quotient = Math.floor(oldR / r);
                        [oldR, r] = [r, oldR - quotient * r];
                        [oldS, s] = [s, oldS - quotient * s];
                        [oldT, t] = [t, oldT - quotient * t];
                    }
                    
                    if (oldR !== 1) return null; // No inverse exists
                    return (oldS % m + m) % m;
                }
                
                function reverseXorshift(numbers) {
                    // Simplified xorshift32 reverse engineering
                    // Real implementation would need more sophisticated analysis
                    
                    if (numbers.length < 4) {
                        return { error: "At least 4 numbers are required" };
                    }
                    
                    // Try to find seed that generates the sequence
                    for (let seed = 0; seed < 100000; seed++) {
                        const gen = xorshift(seed);
                        let match = true;
                        
                        for (let i = 0; i < numbers.length; i++) {
                            const expected = numbers[i];
                            const actual = Math.floor(gen() * 4294967296);
                            
                            if (expected !== actual) {
                                match = false;
                                break;
                            }
                        }
                        
                        if (match) {
                            return {
                                success: true,
                                seed,
                                algorithm: 'xorshift32'
                            };
                        }
                    }
                    
                    return { error: "Could not find matching seed in tested range" };
                }
                
                function reverseMulberry32(numbers) {
                    // Simplified mulberry32 reverse engineering
                    if (numbers.length < 4) {
                        return { error: "At least 4 numbers are required" };
                    }
                    
                    // Try to find seed that generates the sequence
                    for (let seed = 0; seed < 100000; seed++) {
                        const gen = mulberry32(seed);
                        let match = true;
                        
                        for (let i = 0; i < numbers.length; i++) {
                            const expected = numbers[i];
                            const actual = Math.floor(gen() * 4294967296);
                            
                            if (expected !== actual) {
                                match = false;
                                break;
                            }
                        }
                        
                        if (match) {
                            return {
                                success: true,
                                seed,
                                algorithm: 'mulberry32'
                            };
                        }
                    }
                    
                    return { error: "Could not find matching seed in tested range" };
                }
                
                function reverseSFC32(numbers) {
                    // Simplified sfc32 reverse engineering
                    if (numbers.length < 8) {
                        return { error: "At least 8 numbers are required" };
                    }
                    
                    // Try to find seeds that generate the sequence
                    for (let a = 0; a < 1000; a++) {
                        for (let b = a + 1; b < 1000; b++) {
                            const gen = sfc32(a, b, b + 1, b + 2);
                            let match = true;
                            
                            for (let i = 0; i < numbers.length; i++) {
                                const expected = numbers[i];
                                const actual = Math.floor(gen() * 4294967296);
                                
                                if (expected !== actual) {
                                    match = false;
                                    break;
                                }
                            }
                            
                            if (match) {
                                return {
                                    success: true,
                                    seeds: [a, b, b + 1, b + 2],
                                    algorithm: 'sfc32'
                                };
                            }
                        }
                    }
                    
                    return { error: "Could not find matching seeds in tested range" };
                }
                
                onmessage = function(e) {
                    const { algorithm, numbers } = e.data;
                    let result;
                    
                    switch(algorithm) {
                        case 'lcg':
                            result = reverseLCG(numbers);
                            break;
                        case 'xorshift32':
                            result = reverseXorshift(numbers);
                            break;
                        case 'mulberry32':
                            result = reverseMulberry32(numbers);
                            break;
                        case 'sfc32':
                            result = reverseSFC32(numbers);
                            break;
                        default:
                            result = { error: "Unsupported algorithm" };
                    }
                    
                    postMessage(result);
                };
            `], { type: 'application/javascript' })));
            
            prngReverseWorker.onmessage = function(e) {
                const result = e.data;
                
                document.getElementById('prng-reverse-progress').style.display = 'none';
                document.getElementById('prng-stop-button').style.display = 'none';
                
                if (result.error) {
                    document.getElementById('prng-reverse-status').className = 'status error';
                    document.getElementById('prng-reverse-status').textContent = 'Error: ' + result.error;
                    return;
                }
                
                // Display results
                let resultsHTML = '<h4>Reverse Engineering Results</h4>';
                
                if (result.algorithm === 'lcg') {
                    resultsHTML += `
                        <table class="data-table">
                            <tr><th>Parameter</th><th>Value</th></tr>
                            <tr><td>Algorithm</td><td>Linear Congruential Generator</td></tr>
                            <tr><td>Multiplier (a)</td><td>${result.multiplier}</td></tr>
                            <tr><td>Increment (c)</td><td>${result.increment}</td></tr>
                            <tr><td>Modulus (m)</td><td>${result.modulus}</td></tr>
                            <tr><td>Seed</td><td>${result.seed}</td></tr>
                        </table>
                    `;
                    
                    // Generate verification numbers
                    const gen = lcg(result.multiplier, result.increment, result.modulus, result.seed);
                    let verificationNumbers = [];
                    for (let i = 0; i < targetNumbers.length + 5; i++) {
                        verificationNumbers.push(Math.floor(gen() * result.modulus));
                    }
                    
                    document.getElementById('prng-seed-verification').value = verificationNumbers.join('\n');
                    
                    // Show predictions
                    const predictionsHTML = `
                        <h4>Next 5 Predicted Numbers</h4>
                        <div class="lotto-balls">
                            ${verificationNumbers.slice(targetNumbers.length, targetNumbers.length + 5).map(n => `
                                <div class="ball">${n}</div>
                            `).join('')}
                        </div>
                    `;
                    
                    document.getElementById('prng-predictions-content').innerHTML = predictionsHTML;
                } else if (result.algorithm === 'xorshift32' || result.algorithm === 'mulberry32') {
                    resultsHTML += `
                        <table class="data-table">
                            <tr><th>Parameter</th><th>Value</th></tr>
                            <tr><td>Algorithm</td><td>${result.algorithm}</td></tr>
                            <tr><td>Seed</td><td>${result.seed}</td></tr>
                        </table>
                    `;
                    
                    // Generate verification numbers
                    let gen;
                    if (result.algorithm === 'xorshift32') {
                        gen = xorshift(result.seed);
                    } else {
                        gen = mulberry32(result.seed);
                    }
                    
                    let verificationNumbers = [];
                    for (let i = 0; i < targetNumbers.length + 5; i++) {
                        verificationNumbers.push(Math.floor(gen() * 4294967296));
                    }
                    
                    document.getElementById('prng-seed-verification').value = verificationNumbers.join('\n');
                    
                    // Show predictions
                    const predictionsHTML = `
                        <h4>Next 5 Predicted Numbers</h4>
                        <div class="lotto-balls">
                            ${verificationNumbers.slice(targetNumbers.length, targetNumbers.length + 5).map(n => `
                                <div class="ball">${n}</div>
                            `).join('')}
                        </div>
                    `;
                    
                    document.getElementById('prng-predictions-content').innerHTML = predictionsHTML;
                } else if (result.algorithm === 'sfc32') {
                    resultsHTML += `
                        <table class="data-table">
                            <tr><th>Parameter</th><th>Value</th></tr>
                            <tr><td>Algorithm</td><td>sfc32</td></tr>
                            <tr><td>Seed a</td><td>${result.seeds[0]}</td></tr>
                            <tr><td>Seed b</td><td>${result.seeds[1]}</td></tr>
                            <tr><td>Seed c</td><td>${result.seeds[2]}</td></tr>
                            <tr><td>Seed d</td><td>${result.seeds[3]}</td></tr>
                        </table>
                    `;
                    
                    // Generate verification numbers
                    const gen = sfc32(result.seeds[0], result.seeds[1], result.seeds[2], result.seeds[3]);
                    let verificationNumbers = [];
                    for (let i = 0; i < targetNumbers.length + 5; i++) {
                        verificationNumbers.push(Math.floor(gen() * 4294967296));
                    }
                    
                    document.getElementById('prng-seed-verification').value = verificationNumbers.join('\n');
                    
                    // Show predictions
                    const predictionsHTML = `
                        <h4>Next 5 Predicted Numbers</h4>
                        <div class="lotto-balls">
                            ${verificationNumbers.slice(targetNumbers.length, targetNumbers.length + 5).map(n => `
                                <div class="ball">${n}</div>
                            `).join('')}
                        </div>
                    `;
                    
                    document.getElementById('prng-predictions-content').innerHTML = predictionsHTML;
                }
                
                document.getElementById('prng-seed-results').innerHTML = resultsHTML;
                document.getElementById('prng-reverse-status').className = 'status success';
                document.getElementById('prng-reverse-status').textContent = 'Reverse engineering completed successfully';
            };
            
            prngReverseWorker.onerror = function(error) {
                document.getElementById('prng-reverse-progress').style.display = 'none';
                document.getElementById('prng-stop-button').style.display = 'none';
                document.getElementById('prng-reverse-status').className = 'status error';
                document.getElementById('prng-reverse-status').textContent = 'Error: ' + error.message;
            };
            
            // Start the worker
            prngReverseWorker.postMessage({
                algorithm,
                numbers: targetNumbers
            });
            
            // Simulate progress updates
            let progress = 0;
            const progressInterval = setInterval(() => {
                progress = Math.min(progress + Math.random() * 10, 90);
                document.getElementById('prng-progress-bar').style.width = `${progress}%`;
            }, 500);
            
            // Clean up when done
            prngReverseWorker.onmessage = function(e) {
                clearInterval(progressInterval);
                document.getElementById('prng-progress-bar').style.width = '100%';
                setTimeout(() => {
                    document.getElementById('prng-reverse-progress').style.display = 'none';
                }, 500);
                
                // Handle the actual message
                const result = e.data;
                
                document.getElementById('prng-stop-button').style.display = 'none';
                
                if (result.error) {
                    document.getElementById('prng-reverse-status').className = 'status error';
                    document.getElementById('prng-reverse-status').textContent = 'Error: ' + result.error;
                    return;
                }
                
                // Display results (same as before)
                // ... (rest of the onmessage handler)
            };
        }

        function stopPRNGReverseEngineer() {
            if (prngReverseWorker) {
                prngReverseWorker.terminate();
                prngReverseWorker = null;
                
                document.getElementById('prng-reverse-progress').style.display = 'none';
                document.getElementById('prng-stop-button').style.display = 'none';
                document.getElementById('prng-reverse-status').className = 'status warning';
                document.getElementById('prng-reverse-status').textContent = 'Reverse engineering stopped by user';
            }
        }

        function clearPRNGReverse() {
            document.getElementById('prng-target-numbers').value = '';
            document.getElementById('prng-seed-results').innerHTML = 'Seed candidates will appear here after analysis.';
            document.getElementById('prng-seed-verification').value = '';
            document.getElementById('prng-predictions-content').innerHTML = '';
            document.getElementById('prng-reverse-status').className = 'status info';
            document.getElementById('prng-reverse-status').textContent = 'Enter observed numbers to begin reverse engineering. More numbers increase accuracy.';
            document.getElementById('prng-reverse-progress').style.display = 'none';
            document.getElementById('prng-stop-button').style.display = 'none';
            
            if (prngReverseWorker) {
                prngReverseWorker.terminate();
                prngReverseWorker = null;
            }
        }

        function samplePRNGData() {
            const algorithm = document.getElementById('reverse-prng-algorithm').value;
            let sampleData = '';
            
            switch(algorithm) {
                case 'lcg':
                    sampleData = `12345\n593375646\n315516917\n2607653316\n2607653316\n315516917\n593375646\n12345`;
                    break;
                case 'xorshift32':
                    sampleData = `12345\n593375646\n315516917\n2607653316\n2607653316\n315516917\n593375646\n12345`;
                    break;
                case 'mulberry32':
                    sampleData = `12345\n593375646\n315516917\n2607653316\n2607653316\n315516917\n593375646\n12345`;
                    break;
                case 'sfc32':
                    sampleData = `12345\n593375646\n315516917\n2607653316\n2607653316\n315516917\n593375646\n12345`;
                    break;
            }
            
            document.getElementById('prng-target-numbers').value = sampleData;
            showToast('Sample data loaded', 'info');
        }

        // Lotto Generator Functions

        function updateLottoParams() {
            const gameType = document.getElementById('lotto-game-type').value;
            const customParams = document.getElementById('lotto-custom-params');
            
            if (gameType === 'custom') {
                customParams.style.display = 'block';
            } else {
                customParams.style.display = 'none';
                
                // Set default values for known game types
                switch(gameType) {
                    case 'powerball':
                        document.getElementById('lotto-main-numbers').value = 69;
                        document.getElementById('lotto-pick-numbers').value = 5;
                        document.getElementById('lotto-bonus-numbers').value = 26;
                        document.getElementById('lotto-pick-bonus').value = 1;
                        break;
                    case 'megamillions':
                        document.getElementById('lotto-main-numbers').value = 70;
                        document.getElementById('lotto-pick-numbers').value = 5;
                        document.getElementById('lotto-bonus-numbers').value = 25;
                        document.getElementById('lotto-pick-bonus').value = 1;
                        break;
                    case 'euromillions':
                        document.getElementById('lotto-main-numbers').value = 50;
                        document.getElementById('lotto-pick-numbers').value = 5;
                        document.getElementById('lotto-bonus-numbers').value = 12