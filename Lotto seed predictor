<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lottery Analysis & Prediction Tool</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        :root {
            --primary: #3498db;
            --secondary: #2ecc71;
            --danger: #e74c3c;
            --warning: #f39c12;
            --dark: #2c3e50;
            --light: #ecf0f1;
        }
        
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: #f5f5f5;
            color: #333;
            line-height: 1.6;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            background-color: var(--dark);
            color: white;
            padding: 20px 0;
            text-align: center;
            margin-bottom: 30px;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        h1, h2, h3, h4 {
            margin-bottom: 15px;
            color: var(--dark);
        }
        
        .tabs {
            display: flex;
            margin-bottom: 20px;
            border-bottom: 1px solid #ddd;
        }
        
        .tab {
            padding: 10px 20px;
            cursor: pointer;
            background-color: #f1f1f1;
            border: 1px solid #ddd;
            border-bottom: none;
            border-radius: 5px 5px 0 0;
            margin-right: 5px;
        }
        
        .tab.active {
            background-color: white;
            border-bottom: 1px solid white;
            margin-bottom: -1px;
            font-weight: bold;
            color: var(--primary);
        }
        
        .tab-content {
            display: none;
            padding: 20px;
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 0 5px 5px 5px;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .card {
            background-color: white;
            border-radius: 5px;
            padding: 15px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        .card h4 {
            color: var(--primary);
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
            margin-bottom: 15px;
        }
        
        textarea {
            width: 100%;
            min-height: 150px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            margin-bottom: 15px;
            font-family: monospace;
        }
        
        button, .btn {
            background-color: var(--primary);
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
            margin-right: 10px;
            margin-bottom: 10px;
        }
        
        button:hover, .btn:hover {
            background-color: #2980b9;
        }
        
        .btn-danger {
            background-color: var(--danger);
        }
        
        .btn-danger:hover {
            background-color: #c0392b;
        }
        
        .btn-success {
            background-color: var(--secondary);
        }
        
        .btn-success:hover {
            background-color: #27ae60;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        
        th, td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        
        th {
            background-color: #f8f9fa;
            font-weight: bold;
        }
        
        tr:hover {
            background-color: #f5f5f5;
        }
        
        .number-ball {
            display: inline-block;
            width: 40px;
            height: 40px;
            line-height: 40px;
            text-align: center;
            border-radius: 50%;
            background-color: var(--primary);
            color: white;
            font-weight: bold;
            margin: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        
        .number-ball.special {
            background-color: var(--warning);
        }
        
        .number-ball.highlight {
            background-color: var(--danger);
        }
        
        .number-ball.cold {
            background-color: var(--dark);
        }
        
        .chart-container {
            position: relative;
            height: 400px;
            margin-bottom: 30px;
        }
        
        .progress-container {
            margin: 20px 0;
            display: none;
        }
        
        .progress-bar {
            height: 30px;
            background-color: #e0e0e0;
            border-radius: 5px;
            overflow: hidden;
        }
        
        .progress {
            height: 100%;
            background-color: var(--primary);
            width: 0%;
            transition: width 0.3s;
            text-align: center;
            line-height: 30px;
            color: white;
        }
        
        .result {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 15px;
            border-left: 4px solid var(--primary);
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        
        input[type="number"], input[type="text"], select {
            width: 100%;
            padding: 8px 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-bottom: 10px;
        }
        
        .checkbox-group {
            margin-bottom: 15px;
        }
        
        .checkbox-group label {
            display: inline-block;
            margin-right: 15px;
            cursor: pointer;
        }
        
        .checkbox-group input {
            margin-right: 5px;
        }
        
        @media (max-width: 768px) {
            .grid {
                grid-template-columns: 1fr;
            }
            
            .tabs {
                flex-direction: column;
            }
            
            .tab {
                border-radius: 0;
                margin-right: 0;
                border-bottom: 1px solid #ddd;
            }
            
            .tab.active {
                border-radius: 0;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Lottery Analysis & Prediction Tool</h1>
            <p>Analyze historical lottery data and generate smart predictions</p>
        </header>
        
        <div class="tabs">
            <div class="tab active" onclick="openTab(event, 'analyzer')">Number Analyzer</div>
            <div class="tab" onclick="openTab(event, 'generator')">Number Generator</div>
            <div class="tab" onclick="openTab(event, 'reverseEngineer')">Seed Reverse Engineer</div>
            <div class="tab" onclick="openTab(event, 'predictor')">Smart Predictor</div>
        </div>
        
        <!-- Analyzer Tab -->
        <div id="analyzer" class="tab-content active">
            <h2>Lottery Number Analyzer</h2>
            <p>Enter your lottery numbers (one draw per line, numbers separated by spaces):</p>
            
            <textarea id="lotteryNumbers" placeholder="Example:
3 15 22 28 35 42
5 12 19 27 33 44
8 14 21 29 36 45"></textarea>
            
            <div>
                <button onclick="analyzeNumbers()">Analyze Numbers</button>
                <button onclick="loadSampleData()" class="btn-success">Load Sample Data</button>
                <button onclick="clearAnalysis()" class="btn-danger">Clear</button>
            </div>
            
            <div id="analysisResults"></div>
            
            <div class="grid">
                <div class="chart-container">
                    <canvas id="frequencyChart"></canvas>
                </div>
                <div class="chart-container">
                    <canvas id="gapChart"></canvas>
                </div>
            </div>
            
            <div class="grid">
                <div class="chart-container">
                    <canvas id="pairChart"></canvas>
                </div>
                <div class="chart-container">
                    <canvas id="positionChart"></canvas>
                </div>
            </div>
        </div>
        
        <!-- Generator Tab -->
        <div id="generator" class="tab-content">
            <h2>Lottery Number Generator</h2>
            <p>Generate random lottery numbers using different algorithms</p>
            
            <div class="grid">
                <div class="card">
                    <h4>Generator Settings</h4>
                    
                    <div class="form-group">
                        <label for="generatorType">Algorithm:</label>
                        <select id="generatorType">
                            <option value="lcg">Linear Congruential</option>
                            <option value="mersenne">Mersenne Twister</option>
                            <option value="xorshift">Xorshift</option>
                            <option value="fibonacci">Fibonacci</option>
                            <option value="combined">Combined LCG+Xorshift</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="drawsToGenerate">Number of Draws:</label>
                        <input type="number" id="drawsToGenerate" min="1" max="100" value="5">
                    </div>
                    
                    <div class="form-group">
                        <label for="numbersPerDraw">Numbers per Draw:</label>
                        <input type="number" id="numbersPerDraw" min="1" max="20" value="6">
                    </div>
                    
                    <div class="form-group">
                        <label for="maxNumber">Maximum Number:</label>
                        <input type="number" id="maxNumber" min="1" max="100" value="49">
                    </div>
                </div>
                
                <div class="card">
                    <h4>Advanced Options</h4>
                    
                    <div class="form-group">
                        <label for="customSeed">Custom Seed (optional):</label>
                        <input type="text" id="customSeed" placeholder="Leave blank for random">
                    </div>
                    
                    <div class="checkbox-group">
                        <label>
                            <input type="checkbox" id="avoidConsecutive"> Avoid consecutive numbers
                        </label>
                    </div>
                    
                    <div class="checkbox-group">
                        <label>
                            <input type="checkbox" id="balancedDistribution"> Balanced number distribution
                        </label>
                    </div>
                </div>
            </div>
            
            <button onclick="generateLottoNumbers()">Generate Numbers</button>
            <button onclick="saveGeneratedNumbers()" class="btn-success">Save to Analyzer</button>
            
            <div id="generatorResults"></div>
        </div>
        
        <!-- Reverse Engineer Tab -->
        <div id="reverseEngineer" class="tab-content">
            <h2>PRNG Seed Reverse Engineering</h2>
            <p>Attempt to reverse engineer the seed used to generate lottery numbers</p>
            
            <div class="grid">
                <div class="card">
                    <h4>Input Historical Draws</h4>
                    <textarea id="historicalDraws" placeholder="Enter known sequence of numbers (one per line or space separated)"></textarea>
                </div>
                
                <div class="card">
                    <h4>Detection Settings</h4>
                    
                    <div class="form-group">
                        <label for="seedAlgorithm">PRNG Algorithm:</label>
                        <select id="seedAlgorithm">
                            <option value="lcg">Linear Congruential</option>
                            <option value="xorshift">Xorshift</option>
                            <option value="combined">Combined LCG+Xorshift</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="maxSeedValue">Maximum Seed Value:</label>
                        <input type="number" id="maxSeedValue" min="1" value="1000000">
                    </div>
                    
                    <div class="checkbox-group">
                        <label>
                            <input type="checkbox" id="useMultiThread" checked> Use multi-threading (Web Workers)
                        </label>
                    </div>
                    
                    <div class="checkbox-group">
                        <label>
                            <input type="checkbox" id="extendedVerification"> Extended verification
                        </label>
                    </div>
                </div>
            </div>
            
            <button onclick="reverseEngineerSeed()">Find Seed</button>
            <button onclick="testSeedPrediction()" class="btn-success">Test Seed Prediction</button>
            
            <div class="progress-container" id="seedProgress">
                <h4>Progress</h4>
                <div class="progress-bar">
                    <div class="progress" id="seedProgressBar">0%</div>
                </div>
            </div>
            
            <div id="seedResults"></div>
            <div id="predictionResults"></div>
        </div>
        
        <!-- Predictor Tab -->
        <div id="predictor" class="tab-content">
            <h2>Smart Prediction System</h2>
            <p>Generate predictions based on statistical analysis of historical data</p>
            
            <div class="grid">
                <div class="card">
                    <h4>Prediction Method</h4>
                    
                    <div class="form-group">
                        <label for="predictionMethod">Primary Method:</label>
                        <select id="predictionMethod">
                            <option value="frequency">Frequency Analysis</option>
                            <option value="gap">Gap Analysis</option>
                            <option value="positional">Positional Analysis</option>
                            <option value="markov">Markov Chain</option>
                            <option value="neural">Neural Simulation</option>
                        </select>
                    </div>
                    
                    <div class="checkbox-group">
                        <label>
                            <input type="checkbox" id="useCombinedMethods" checked> Combine multiple methods
                        </label>
                    </div>
                    
                    <div class="checkbox-group">
                        <label>
                            <input type="checkbox" id="weightRecent" checked> Weight recent draws more heavily
                        </label>
                    </div>
                </div>
                
                <div class="card">
                    <h4>Prediction Parameters</h4>
                    
                    <div class="form-group">
                        <label for="predictionCount">Numbers to Predict:</label>
                        <input type="number" id="predictionCount" min="1" max="20" value="6">
                    </div>
                    
                    <div class="form-group">
                        <label>Note:</label>
                        <p>This tool analyzes patterns in historical data to suggest numbers that may be more likely to appear based on statistical trends.</p>
                    </div>
                </div>
            </div>
            
            <button onclick="generateSmartPredictions()">Generate Predictions</button>
            
            <div id="predictionOutput"></div>
        </div>
    </div>

    <script>
        // Global variables
        let frequencyChart = null;
        let gapChart = null;
        let pairChart = null;
        let positionChart = null;
        let currentGeneratedNumbers = [];
        let seedDetectionWorker = null;
        
        // Tab navigation
        function openTab(evt, tabName) {
            const tabContents = document.getElementsByClassName("tab-content");
            for (let i = 0; i < tabContents.length; i++) {
                tabContents[i].classList.remove("active");
            }
            
            const tabs = document.getElementsByClassName("tab");
            for (let i = 0; i < tabs.length; i++) {
                tabs[i].classList.remove("active");
            }
            
            document.getElementById(tabName).classList.add("active");
            evt.currentTarget.classList.add("active");
        }
        
        // Analyzer Functions
        function parseInput(input) {
            const lines = input.trim().split('\n');
            const draws = [];
            
            for (const line of lines) {
                const numbers = line.trim().split(/\s+/).map(num => parseInt(num));
                if (numbers.length > 0 && !numbers.some(isNaN)) {
                    draws.push(numbers);
                }
            }
            
            return draws;
        }
        
        function performAdvancedAnalysis(draws) {
            const analysis = {
                frequency: {},
                gaps: {},
                lastSeen: {},
                hotNumbers: [],
                coldNumbers: [],
                commonPairs: {},
                commonTriplets: {},
                positions: {},
                lastDraw: draws[draws.length - 1],
                totalDraws: draws.length
            };
            
            // Initialize frequency and gap tracking
            const allNumbers = new Set();
            for (const draw of draws) {
                for (const num of draw) {
                    allNumbers.add(num);
                    if (!analysis.frequency[num]) {
                        analysis.frequency[num] = 0;
                        analysis.gaps[num] = [];
                        analysis.lastSeen[num] = -1;
                    }
                }
            }
            
            // Calculate frequency and gaps
            for (let i = 0; i < draws.length; i++) {
                const draw = draws[i];
                
                for (const num of draw) {
                    analysis.frequency[num]++;
                    
                    if (analysis.lastSeen[num] !== -1) {
                        const gap = i - analysis.lastSeen[num];
                        analysis.gaps[num].push(gap);
                    }
                    
                    analysis.lastSeen[num] = i;
                }
            }
            
            // Calculate average gaps
            for (const num in analysis.gaps) {
                if (analysis.gaps[num].length > 0) {
                    const avgGap = analysis.gaps[num].reduce((a, b) => a + b, 0) / analysis.gaps[num].length;
                    analysis.gaps[num] = avgGap;
                } else {
                    analysis.gaps[num] = draws.length;
                }
            }
            
            // Identify hot and cold numbers (top and bottom 20%)
            const sortedByFrequency = Object.entries(analysis.frequency).sort((a, b) => b[1] - a[1]);
            const hotCount = Math.ceil(sortedByFrequency.length * 0.2);
            const coldCount = Math.ceil(sortedByFrequency.length * 0.2);
            
            analysis.hotNumbers = sortedByFrequency.slice(0, hotCount).map(x => x[0].toString());
            analysis.coldNumbers = sortedByFrequency.slice(-coldCount).map(x => x[0].toString());
            
            // Find common pairs and triplets
            for (const draw of draws) {
                // Pairs
                for (let i = 0; i < draw.length - 1; i++) {
                    for (let j = i + 1; j < draw.length; j++) {
                        const pair = [draw[i], draw[j]].sort((a, b) => a - b).join('-');
                        analysis.commonPairs[pair] = (analysis.commonPairs[pair] || 0) + 1;
                    }
                }
                
                // Triplets
                for (let i = 0; i < draw.length - 2; i++) {
                    for (let j = i + 1; j < draw.length - 1; j++) {
                        for (let k = j + 1; k < draw.length; k++) {
                            const triplet = [draw[i], draw[j], draw[k]].sort((a, b) => a - b).join('-');
                            analysis.commonTriplets[triplet] = (analysis.commonTriplets[triplet] || 0) + 1;
                        }
                    }
                }
            }
            
            // Sort and convert pairs/triplets to arrays
            analysis.commonPairs = Object.entries(analysis.commonPairs)
                .sort((a, b) => b[1] - a[1])
                .slice(0, 20);
                
            analysis.commonTriplets = Object.entries(analysis.commonTriplets)
                .sort((a, b) => b[1] - a[1])
                .slice(0, 20);
            
            // Positional analysis
            for (let pos = 0; pos < draws[0].length; pos++) {
                analysis.positions[pos + 1] = {};
                
                for (const draw of draws) {
                    const num = draw[pos];
                    analysis.positions[pos + 1][num] = (analysis.positions[pos + 1][num] || 0) + 1;
                }
                
                // Convert to sorted array
                analysis.positions[pos + 1] = Object.entries(analysis.positions[pos + 1])
                    .sort((a, b) => b[1] - a[1])
                    .map(x => [parseInt(x[0]), x[1]]);
            }
            
            // Last positional analysis
            analysis.lastPositionalAnalysis = {};
            const lastDraw = draws[draws.length - 1];
            for (let i = 0; i < lastDraw.length; i++) {
                analysis.lastPositionalAnalysis[i + 1] = lastDraw[i];
            }
            
            return analysis;
        }
        
        function analyzeNumbers() {
            const input = document.getElementById("lotteryNumbers").value.trim();
            if (!input) {
                alert("Please enter some lottery numbers to analyze.");
                return;
            }
            
            const draws = parseInput(input);
            if (draws.length === 0) {
                alert("No valid draws found. Please check your input format.");
                return;
            }
            
            const analysis = performAdvancedAnalysis(draws);
            displayAnalysisResults(analysis, draws);
            createCharts(analysis, draws);
        }
        
        function displayAnalysisResults(analysis, draws) {
            let html = `<h3>Analysis Results (${draws.length} draws analyzed)</h3>`;
            
            // Hot and cold numbers
            html += `<div class="grid">
                <div class="card">
                    <h4>Hot Numbers (Most Frequent)</h4>
                    <div>`;
            
            for (const num of analysis.hotNumbers) {
                html += `<span class="number-ball highlight">${num}</span>`;
            }
            
            html += `</div></div>
                <div class="card">
                    <h4>Cold Numbers (Least Frequent)</h4>
                    <div>`;
            
            for (const num of analysis.coldNumbers) {
                html += `<span class="number-ball cold">${num}</span>`;
            }
            
            html += `</div></div></div>`;
            
            // Frequency distribution by range
            const rangeSize = Math.ceil(Math.max(...Object.keys(analysis.frequency).map(Number)) / 10;
            const frequencyByRange = {};
            
            for (const [num, count] of Object.entries(analysis.frequency)) {
                const range = Math.ceil(parseInt(num) / rangeSize);
                const rangeStart = (range - 1) * rangeSize + 1;
                const rangeEnd = range * rangeSize;
                const rangeKey = `${rangeStart}-${rangeEnd}`;
                
                frequencyByRange[rangeKey] = (frequencyByRange[rangeKey] || 0) + count;
            }
            
            html += `<h4>Frequency Distribution by Number Range</h4>
                <div style="overflow-x: auto;">
                <table>
                    <tr>
                        <th>Number Range</th>
                        <th>Count</th>
                        <th>Percentage</th>
                        <th>Expected %</th>
                        <th>Deviation</th>
                    </tr>`;
            
            const totalNumbers = draws.length * draws[0].length;
            for (const [range, count] of Object.entries(frequencyByRange)) {
                const percentage = (count / totalNumbers * 100).toFixed(2);
                const expectedPercentage = (rangeSize / Math.max(...Object.keys(analysis.frequency).map(Number)) * 100).toFixed(2);
                const deviation = (percentage - expectedPercentage).toFixed(2);
                
                html += `<tr>
                    <td>${range}</td>
                    <td>${count}</td>
                    <td>${percentage}%</td>
                    <td>${expectedPercentage}%</td>
                    <td>${deviation}%</td>
                </tr>`;
            }
            
            html += `</table></div>`;
            
            // Common pairs and triplets
            html += `<div class="grid">
                <div class="card">
                    <h4>Most Common Pairs</h4>
                    <ol>`;
            
            for (const [pair, count] of analysis.commonPairs) {
                html += `<li>${pair.replace('-', ', ')} (${count}x)</li>`;
            }
            
            html += `</ol></div>
                <div class="card">
                    <h4>Most Common Triplets</h4>
                    <ol>`;
            
            for (const [triplet, count] of analysis.commonTriplets) {
                html += `<li>${triplet.replace(/-/g, ', ')} (${count}x)</li>`;
            }
            
            html += `</ol></div></div>`;
            
            // Positional analysis
            html += `<h4>Positional Frequency Analysis</h4>
                <div style="overflow-x: auto;">
                <table>
                    <tr>
                        <th>Position</th>
                        <th>Most Common Numbers</th>
                    </tr>`;
            
            for (const [position, numbers] of Object.entries(analysis.positions)) {
                const topNumbers = numbers.slice(0, 3).map(x => `${x[0]} (${x[1]}x)`).join(', ');
                html += `<tr>
                    <td>${position}</td>
                    <td>${topNumbers}</td>
                </tr>`;
            }
            
            html += `</table></div>`;
            
            document.getElementById("analysisResults").innerHTML = html;
        }
        
        function createCharts(analysis, draws) {
            // Destroy existing charts if they exist
            if (frequencyChart) frequencyChart.destroy();
            if (gapChart) gapChart.destroy();
            if (pairChart) pairChart.destroy();
            if (positionChart) positionChart.destroy();
            
            // Frequency Chart
            const freqCtx = document.getElementById('frequencyChart').getContext('2d');
            const sortedFreq = Object.entries(analysis.frequency).sort((a, b) => a[0] - b[0]);
            
            frequencyChart = new Chart(freqCtx, {
                type: 'bar',
                data: {
                    labels: sortedFreq.map(x => x[0]),
                    datasets: [{
                        label: 'Number Frequency',
                        data: sortedFreq.map(x => x[1]),
                        backgroundColor: sortedFreq.map(x => 
                            analysis.hotNumbers.includes(x[0]) ? '#e74c3c' : 
                            analysis.coldNumbers.includes(x[0]) ? '#3498db' : '#2ecc71'
                        ),
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Frequency Count'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: 'Number'
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const num = context.label;
                                    const freq = context.raw;
                                    const percentage = (freq / analysis.totalDraws * 100).toFixed(2);
                                    return `Frequency: ${freq} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
            
            // Gap Chart
            const gapCtx = document.getElementById('gapChart').getContext('2d');
            const gapData = Object.entries(analysis.gaps).sort((a, b) => a[0] - b[0]);
            
            gapChart = new Chart(gapCtx, {
                type: 'line',
                data: {
                    labels: gapData.map(x => x[0]),
                    datasets: [{
                        label: 'Average Gap Between Appearances',
                        data: gapData.map(x => x[1]),
                        borderColor: '#e74c3c',
                        backgroundColor: 'rgba(231, 76, 60, 0.1)',
                        borderWidth: 2,
                        fill: true,
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Average Gap (in draws)'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: 'Number'
                            }
                        }
                    }
                }
            });
            
            // Pair Chart (Top 20 pairs)
            const pairCtx = document.getElementById('pairChart').getContext('2d');
            const topPairs = analysis.commonPairs.slice(0, 20);
            
            pairChart = new Chart(pairCtx, {
                type: 'horizontalBar',
                data: {
                    labels: topPairs.map(x => x[0].replace('-', ', ')),
                    datasets: [{
                        label: 'Pair Frequency',
                        data: topPairs.map(x => x[1]),
                        backgroundColor: '#3498db',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    indexAxis: 'y',
                    scales: {
                        x: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Frequency Count'
                            }
                        }
                    }
                }
            });
            
            // Position Chart
            const posCtx = document.getElementById('positionChart').getContext('2d');
            const positionData = [];
            const positionLabels = [];
            
            for (const [position, numbers] of Object.entries(analysis.positions)) {
                positionLabels.push(position);
                positionData.push(numbers[0][1]); // Frequency of most common number in position
            }
            
            positionChart = new Chart(posCtx, {
                type: 'radar',
                data: {
                    labels: positionLabels,
                    datasets: [{
                        label: 'Most Frequent Number Count',
                        data: positionData,
                        backgroundColor: 'rgba(46, 204, 113, 0.2)',
                        borderColor: '#2ecc71',
                        borderWidth: 2,
                        pointBackgroundColor: '#2ecc71'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        r: {
                            beginAtZero: true,
                            ticks: {
                                stepSize: 1
                            }
                        }
                    }
                }
            });
        }
        
        function loadSampleData() {
            const sampleData = `3 15 22 28 35 42
5 12 19 27 33 44
8 14 21 29 36 45
2 11 18 26 34 41
7 13 20 30 37 43
1 10 17 25 32 40
4 9 16 24 31 39
6 12 19 27 35 42
3 11 20 28 36 44
5 14 22 29 37 45`;
            document.getElementById("lotteryNumbers").value = sampleData;
        }
        
        function clearAnalysis() {
            document.getElementById("lotteryNumbers").value = "";
            document.getElementById("analysisResults").innerHTML = "";
            
            if (frequencyChart) frequencyChart.destroy();
            if (gapChart) gapChart.destroy();
            if (pairChart) pairChart.destroy();
            if (positionChart) positionChart.destroy();
        }
        
        // Number Generator Functions
        function generateLottoNumbers() {
            const generatorType = document.getElementById("generatorType").value;
            const drawsToGenerate = parseInt(document.getElementById("drawsToGenerate").value);
            const numbersPerDraw = parseInt(document.getElementById("numbersPerDraw").value);
            const maxNumber = parseInt(document.getElementById("maxNumber").value);
            const customSeed = document.getElementById("customSeed").value;
            const avoidConsecutive = document.getElementById("avoidConsecutive").checked;
            const balancedDistribution = document.getElementById("balancedDistribution").checked;
            
            // Validate inputs
            if (numbersPerDraw >= maxNumber) {
                alert("Numbers per draw must be less than the maximum number");
                return;
            }
            
            // Generate seed if not provided
            const seed = customSeed ? parseInt(customSeed) : Math.floor(Math.random() * 1000000);
            
            // Generate numbers based on selected algorithm
            let generatorFn;
            switch (generatorType) {
                case 'lcg':
                    generatorFn = generateLCG;
                    break;
                case 'mersenne':
                    generatorFn = generateMersenne;
                    break;
                case 'xorshift':
                    generatorFn = generateXorshift;
                    break;
                case 'fibonacci':
                    generatorFn = generateFibonacci;
                    break;
                case 'combined':
                    generatorFn = generateCombined;
                    break;
                default:
                    generatorFn = generateLCG;
            }
            
            currentGeneratedNumbers = [];
            let html = `<h3>Generated Numbers (Seed: ${seed})</h3>`;
            html += `<div class="grid">`;
            
            for (let i = 0; i < drawsToGenerate; i++) {
                const draw = generatorFn(numbersPerDraw, maxNumber, seed + i, avoidConsecutive, balancedDistribution);
                currentGeneratedNumbers.push(draw);
                
                html += `<div class="card">
                    <h4>Draw ${i+1}</h4>
                    <div>`;
                
                // Display each number as a ball
                for (let j = 0; j < draw.length; j++) {
                    const isSpecial = (j === draw.length - 1); // Last number is often special in lotteries
                    html += `<span class="number-ball ${isSpecial ? 'special' : ''}">${draw[j]}</span>`;
                }
                
                html += `</div></div>`;
            }
            
            html += `</div>`;
            document.getElementById("generatorResults").innerHTML = html;
        }
        
        // PRNG Algorithms
        function generateLCG(count, max, seed, avoidConsecutive, balanced) {
            // Linear Congruential Generator
            const a = 1664525;
            const c = 1013904223;
            const m = Math.pow(2, 32);
            
            let current = seed;
            const numbers = new Set();
            
            while (numbers.size < count) {
                current = (a * current + c) % m;
                const num = (current % max) + 1;
                
                // Skip if we already have this number
                if (numbers.has(num)) continue;
                
                // Skip consecutive numbers if enabled
                if (avoidConsecutive && numbers.size > 0) {
                    const hasConsecutive = Array.from(numbers).some(n => Math.abs(n - num) === 1);
                    if (hasConsecutive) continue;
                }
                
                // For balanced distribution, ensure numbers are spread across ranges
                if (balanced) {
                    const rangeSize = Math.ceil(max / count);
                    const targetRange = Math.floor((numbers.size) * rangeSize);
                    if (num < targetRange || num > targetRange + rangeSize) continue;
                }
                
                numbers.add(num);
            }
            
            return Array.from(numbers).sort((a, b) => a - b);
        }
        
                function generateMersenne(count, max, seed, avoidConsecutive, balanced) {
            // Mersenne Twister implementation (simplified)
            const N = 624;
            const M = 397;
            const MATRIX_A = 0x9908b0df;
            const UPPER_MASK = 0x80000000;
            const LOWER_MASK = 0x7fffffff;
            
            let mt = new Array(N);
            let mti = N + 1;
            
            // Initialize generator with a seed
            function init_genrand(s) {
                mt[0] = s >>> 0;
                for (mti = 1; mti < N; mti++) {
                    mt[mti] = (1812433253 * (mt[mti-1] ^ (mt[mti-1] >>> 30)) + mti) >>> 0;
                }
            }
            
            // Generate a random number on [0,0xffffffff]-interval
            function genrand_int32() {
                let y;
                const mag01 = [0x0, MATRIX_A];
                
                if (mti >= N) {
                    let kk;
                    
                    for (kk = 0; kk < N - M; kk++) {
                        y = (mt[kk] & UPPER_MASK) | (mt[kk+1] & LOWER_MASK);
                        mt[kk] = mt[kk+M] ^ (y >>> 1) ^ mag01[y & 0x1];
                    }
                    
                    for (; kk < N-1; kk++) {
                        y = (mt[kk] & UPPER_MASK) | (mt[kk+1] & LOWER_MASK);
                        mt[kk] = mt[kk+(M-N)] ^ (y >>> 1) ^ mag01[y & 0x1];
                    }
                    
                    y = (mt[N-1] & UPPER_MASK) | (mt[0] & LOWER_MASK);
                    mt[N-1] = mt[M-1] ^ (y >>> 1) ^ mag01[y & 0x1];
                    
                    mti = 0;
                }
                
                y = mt[mti++];
                
                y ^= (y >>> 11);
                y ^= (y << 7) & 0x9d2c5680;
                y ^= (y << 15) & 0xefc60000;
                y ^= (y >>> 18);
                
                return y >>> 0;
            }
            
            init_genrand(seed);
            const numbers = new Set();
            
            while (numbers.size < count) {
                const num = (genrand_int32() % max) + 1;
                
                if (numbers.has(num)) continue;
                
                if (avoidConsecutive && numbers.size > 0) {
                    const hasConsecutive = Array.from(numbers).some(n => Math.abs(n - num) === 1);
                    if (hasConsecutive) continue;
                }
                
                if (balanced) {
                    const rangeSize = Math.ceil(max / count);
                    const targetRange = Math.floor((numbers.size) * rangeSize);
                    if (num < targetRange || num > targetRange + rangeSize) continue;
                }
                
                numbers.add(num);
            }
            
            return Array.from(numbers).sort((a, b) => a - b);
        }
        
        function generateXorshift(count, max, seed, avoidConsecutive, balanced) {
            // Xorshift algorithm
            let x = seed || 1;
            let y = 0;
            let z = 0;
            let w = 0;
            
            // Seed the generator properly
            if (!seed) {
                x = Math.floor(Math.random() * 2147483647);
            }
            
            function xorshift() {
                let t = x ^ (x << 11);
                x = y;
                y = z;
                z = w;
                w = w ^ (w >>> 19) ^ (t ^ (t >>> 8));
                return w >>> 0;
            }
            
            const numbers = new Set();
            
            while (numbers.size < count) {
                const num = (xorshift() % max) + 1;
                
                if (numbers.has(num)) continue;
                
                if (avoidConsecutive && numbers.size > 0) {
                    const hasConsecutive = Array.from(numbers).some(n => Math.abs(n - num) === 1);
                    if (hasConsecutive) continue;
                }
                
                if (balanced) {
                    const rangeSize = Math.ceil(max / count);
                    const targetRange = Math.floor((numbers.size) * rangeSize);
                    if (num < targetRange || num > targetRange + rangeSize) continue;
                }
                
                numbers.add(num);
            }
            
            return Array.from(numbers).sort((a, b) => a - b);
        }
        
        function generateFibonacci(count, max, seed, avoidConsecutive, balanced) {
            // Fibonacci generator using lagged Fibonacci algorithm
            const lag = 1279;
            const mod = Math.pow(2, 32);
            
            // Initialize array with seed values
            const fibArray = new Array(lag);
            fibArray[0] = seed || 1;
            
            for (let i = 1; i < lag; i++) {
                fibArray[i] = (fibArray[i-1] * 1664525 + 1013904223) % mod;
            }
            
            let ptr1 = lag - 1;
            let ptr2 = lag - 24; // Using two different lags
            
            const numbers = new Set();
            
            while (numbers.size < count) {
                const next = (fibArray[ptr1] + fibArray[ptr2]) % mod;
                fibArray[ptr1] = next;
                
                // Move pointers circularly
                ptr1 = (ptr1 + 1) % lag;
                ptr2 = (ptr2 + 1) % lag;
                
                const num = (next % max) + 1;
                
                if (numbers.has(num)) continue;
                
                if (avoidConsecutive && numbers.size > 0) {
                    const hasConsecutive = Array.from(numbers).some(n => Math.abs(n - num) === 1);
                    if (hasConsecutive) continue;
                }
                
                if (balanced) {
                    const rangeSize = Math.ceil(max / count);
                    const targetRange = Math.floor((numbers.size) * rangeSize);
                    if (num < targetRange || num > targetRange + rangeSize) continue;
                }
                
                numbers.add(num);
            }
            
            return Array.from(numbers).sort((a, b) => a - b);
        }
        
        function generateCombined(count, max, seed, avoidConsecutive, balanced) {
            // Combined LCG and Xorshift for better randomness
            const lcgA = 1664525;
            const lcgC = 1013904223;
            const lcgM = Math.pow(2, 32);
            
            let lcgState = seed;
            let xorshiftState = seed ^ 0x76ace65f;
            
            function nextCombined() {
                // LCG step
                lcgState = (lcgA * lcgState + lcgC) % lcgM;
                
                // Xorshift step
                xorshiftState ^= (xorshiftState << 13);
                xorshiftState ^= (xorshiftState >>> 17);
                xorshiftState ^= (xorshiftState << 5);
                
                // Combine both
                return (lcgState ^ xorshiftState) >>> 0;
            }
            
            const numbers = new Set();
            
            while (numbers.size < count) {
                const num = (nextCombined() % max) + 1;
                
                if (numbers.has(num)) continue;
                
                if (avoidConsecutive && numbers.size > 0) {
                    const hasConsecutive = Array.from(numbers).some(n => Math.abs(n - num) === 1);
                    if (hasConsecutive) continue;
                }
                
                if (balanced) {
                    const rangeSize = Math.ceil(max / count);
                    const targetRange = Math.floor((numbers.size) * rangeSize);
                    if (num < targetRange || num > targetRange + rangeSize) continue;
                }
                
                numbers.add(num);
            }
            
            return Array.from(numbers).sort((a, b) => a - b);
        }
        
        function saveGeneratedNumbers() {
            if (currentGeneratedNumbers.length === 0) {
                alert("No generated numbers to save. Please generate some numbers first.");
                return;
            }
            
            const numbersText = currentGeneratedNumbers.map(draw => draw.join(' ')).join('\n');
            document.getElementById("lotteryNumbers").value = numbersText;
            alert("Generated numbers have been saved to the analyzer tab.");
        }
        
        // Reverse Engineering Functions
        function reverseEngineerSeed() {
            const input = document.getElementById("historicalDraws").value.trim();
            if (!input) {
                alert("Please enter some historical draws to analyze.");
                return;
            }
            
            const draws = parseInput(input);
            if (draws.length < 3) {
                alert("You need at least 3 draws to attempt seed reverse engineering.");
                return;
            }
            
            const algorithm = document.getElementById("seedAlgorithm").value;
            const maxSeedValue = parseInt(document.getElementById("maxSeedValue").value);
            const useMultiThread = document.getElementById("useMultiThread").checked;
            const extendedVerification = document.getElementById("extendedVerification").checked;
            
            document.getElementById("seedProgress").style.display = "block";
            document.getElementById("seedProgressBar").style.width = "0%";
            document.getElementById("seedProgressBar").innerText = "0%";
            
            if (useMultiThread && typeof(Worker) !== "undefined") {
                // Use Web Workers for multi-threading
                if (seedDetectionWorker) {
                    seedDetectionWorker.terminate();
                }
                
                seedDetectionWorker = new Worker(URL.createObjectURL(new Blob([`
                    onmessage = function(e) {
                        const { algorithm, draws, maxSeedValue, extendedVerification } = e.data;
                        const foundSeeds = [];
                        
                        for (let seed = 1; seed <= maxSeedValue; seed++) {
                            if (seed % 10000 === 0) {
                                postMessage({ type: 'progress', seed, maxSeedValue });
                            }
                            
                            let matches = true;
                            let currentSeed = seed;
                            
                            // Test against all draws
                            for (let i = 0; i < draws.length; i++) {
                                const generated = generateNumbers(algorithm, draws[i].length, Math.max(...draws[i]), currentSeed);
                                
                                if (!arraysEqual(generated, draws[i])) {
                                    matches = false;
                                    break;
                                }
                                
                                if (extendedVerification) {
                                    currentSeed = generated[0]; // Use first number as next seed
                                } else {
                                    currentSeed++; // Just increment for basic verification
                                }
                            }
                            
                            if (matches) {
                                foundSeeds.push(seed);
                            }
                        }
                        
                        postMessage({ type: 'result', foundSeeds });
                    }
                    
                    function generateNumbers(algorithm, count, max, seed) {
                        // Simplified version of our generation functions
                        switch (algorithm) {
                            case 'lcg':
                                return generateLCG(count, max, seed, false, false);
                            case 'xorshift':
                                return generateXorshift(count, max, seed, false, false);
                            case 'combined':
                                return generateCombined(count, max, seed, false, false);
                            default:
                                return generateLCG(count, max, seed, false, false);
                        }
                    }
                    
                    function generateLCG(count, max, seed) {
                        const a = 1664525;
                        const c = 1013904223;
                        const m = Math.pow(2, 32);
                        let current = seed;
                        const numbers = new Set();
                        
                        while (numbers.size < count) {
                            current = (a * current + c) % m;
                            const num = (current % max) + 1;
                            if (!numbers.has(num)) numbers.add(num);
                        }
                        
                        return Array.from(numbers).sort((a, b) => a - b);
                    }
                    
                    function generateXorshift(count, max, seed) {
                        let x = seed || 1;
                        let y = 0;
                        let z = 0;
                        let w = 0;
                        
                        function xorshift() {
                            let t = x ^ (x << 11);
                            x = y;
                            y = z;
                            z = w;
                            w = w ^ (w >>> 19) ^ (t ^ (t >>> 8));
                            return w >>> 0;
                        }
                        
                        const numbers = new Set();
                        
                        while (numbers.size < count) {
                            const num = (xorshift() % max) + 1;
                            if (!numbers.has(num)) numbers.add(num);
                        }
                        
                        return Array.from(numbers).sort((a, b) => a - b);
                    }
                    
                    function generateCombined(count, max, seed) {
                        const lcgA = 1664525;
                        const lcgC = 1013904223;
                        const lcgM = Math.pow(2, 32);
                        
                        let lcgState = seed;
                        let xorshiftState = seed ^ 0x76ace65f;
                        
                        function nextCombined() {
                            lcgState = (lcgA * lcgState + lcgC) % lcgM;
                            xorshiftState ^= (xorshiftState << 13);
                            xorshiftState ^= (xorshiftState >>> 17);
                            xorshiftState ^= (xorshiftState << 5);
                            return (lcgState ^ xorshiftState) >>> 0;
                        }
                        
                        const numbers = new Set();
                        
                        while (numbers.size < count) {
                            const num = (nextCombined() % max) + 1;
                            if (!numbers.has(num)) numbers.add(num);
                        }
                        
                        return Array.from(numbers).sort((a, b) => a - b);
                    }
                    
                    function arraysEqual(a, b) {
                        if (a.length !== b.length) return false;
                        for (let i = 0; i < a.length; i++) {
                            if (a[i] !== b[i]) return false;
                        }
                        return true;
                    }
                `], { type: 'application/javascript' })));
                
                seedDetectionWorker.onmessage = function(e) {
                    if (e.data.type === 'progress') {
                        const progress = Math.floor((e.data.seed / e.data.maxSeedValue) * 100);
                        document.getElementById("seedProgressBar").style.width = progress + "%";
                        document.getElementById("seedProgressBar").innerText = progress + "%";
                    } else if (e.data.type === 'result') {
                        displaySeedResults(e.data.foundSeeds, draws, algorithm);
                    }
                };
                
                seedDetectionWorker.postMessage({
                    algorithm,
                    draws,
                    maxSeedValue,
                    extendedVerification
                });
            } else {
                // Single-threaded approach
                const foundSeeds = [];
                const startTime = Date.now();
                
                for (let seed = 1; seed <= maxSeedValue; seed++) {
                    if (seed % 1000 === 0) {
                        const progress = Math.floor((seed / maxSeedValue) * 100);
                        document.getElementById("seedProgressBar").style.width = progress + "%";
                        document.getElementById("seedProgressBar").innerText = progress + "%";
                        
                        // Allow UI to update
                        await new Promise(resolve => setTimeout(resolve, 0));
                    }
                    
                    let matches = true;
                    let currentSeed = seed;
                    
                    // Test against all draws
                    for (let i = 0; i < draws.length; i++) {
                        const generated = generateNumbersForSeedTest(algorithm, draws[i].length, Math.max(...draws[i]), currentSeed);
                        
                        if (!arraysEqual(generated, draws[i])) {
                            matches = false;
                            break;
                        }
                        
                        if (extendedVerification) {
                            currentSeed = generated[0]; // Use first number as next seed
                        } else {
                            currentSeed++; // Just increment for basic verification
                        }
                    }
                    
                    if (matches) {
                        foundSeeds.push(seed);
                    }
                }
                
                displaySeedResults(foundSeeds, draws, algorithm);
            }
        }
        
        function generateNumbersForSeedTest(algorithm, count, max, seed) {
            // Simplified version for seed testing
            switch (algorithm) {
                case 'lcg':
                    return generateLCG(count, max, seed, false, false);
                case 'xorshift':
                    return generateXorshift(count, max, seed, false, false);
                case 'combined':
                    return generateCombined(count, max, seed, false, false);
                default:
                    return generateLCG(count, max, seed, false, false);
            }
        }
        
        function arraysEqual(a, b) {
            if (a.length !== b.length) return false;
            for (let i = 0; i < a.length; i++) {
                if (a[i] !== b[i]) return false;
            }
            return true;
        }
        
        function displaySeedResults(foundSeeds, draws, algorithm) {
            let html = `<h3>Seed Detection Results</h3>`;
            
            if (foundSeeds.length === 0) {
                html += `<div class="result">No matching seeds found for the given algorithm and draws.</div>`;
            } else {
                html += `<div class="result">Found ${foundSeeds.length} potential seed(s):</div>`;
                html += `<ul>`;
                
                for (const seed of foundSeeds) {
                    html += `<li><strong>Seed ${seed}</strong>`;
                    
                    // Show predictions for next draw
                    const nextDraw = generateNumbersForSeedTest(algorithm, draws[0].length, Math.max(...draws[0]), seed + draws.length);
                    html += ` - Next predicted draw: ${nextDraw.join(', ')}</li>`;
                }
                
                html += `</ul>`;
            }
            
            document.getElementById("seedResults").innerHTML = html;
        }
        
        function testSeedPrediction() {
            const seedResults = document.getElementById("seedResults").innerHTML;
            if (!seedResults || seedResults.includes("No matching seeds found")) {
                alert("Please find some seeds first before testing predictions.");
                return;
            }
            
            const input = document.getElementById("historicalDraws").value.trim();
            if (!input) {
                alert("Please enter some historical draws to analyze.");
                return;
            }
            
            const draws = parseInput(input);
            const algorithm = document.getElementById("seedAlgorithm").value;
            
            // Extract seeds from results (this is a bit hacky)
            const seedMatches = seedResults.match(/Seed (\d+)/g);
            if (!seedMatches || seedMatches.length === 0) {
                alert("Could not extract seeds from results.");
                return;
            }
            
            const seeds = seedMatches.map(match => parseInt(match.replace("Seed ", "")));
            let html = `<h3>Seed Prediction Test</h3>`;
            
            for (const seed of seeds) {
                html += `<h4>Testing Seed ${seed}</h4>`;
                html += `<table><tr><th>Draw</th><th>Actual</th><th>Predicted</th><th>Match</th></tr>`;
                
                let totalCorrect = 0;
                let totalNumbers = 0;
                
                for (let i = 0; i < draws.length; i++) {
                    const predicted = generateNumbersForSeedTest(algorithm, draws[i].length, Math.max(...draws[i]), seed + i);
                    const actual = draws[i];
                    
                    // Count matching numbers
                    const matches = predicted.filter(num => actual.includes(num));
                    const matchCount = matches.length;
                    const matchPercentage = Math.round((matchCount / draws[i].length) * 100);
                    
                    totalCorrect += matchCount;
                    totalNumbers += draws[i].length;
                    
                    html += `<tr>
                        <td>${i+1}</td>
                        <td>${actual.join(', ')}</td>
                        <td>${predicted.join(', ')}</td>
                        <td>${matchCount} (${matchPercentage}%)</td>
                    </tr>`;
                }
                
                const overallPercentage = Math.round((totalCorrect / totalNumbers) * 100);
                html += `</table>`;
                html += `<div class="result">Overall prediction accuracy: ${totalCorrect} of ${totalNumbers} (${overallPercentage}%)</div>`;
            }
            
            document.getElementById("predictionResults").innerHTML = html;
        }
        
        // Smart Predictor Functions
        function generateSmartPredictions() {
            const input = document.getElementById("lotteryNumbers").value.trim();
            if (!input) {
                alert("Please enter some historical lottery data in the Analyzer tab first.");
                return;
            }
            
            const draws = parseInput(input);
            if (draws.length < 10) {
                alert("You need at least 10 historical draws for meaningful predictions.");
                return;
            }
            
            const method = document.getElementById("predictionMethod").value;
            const useCombinedMethods = document.getElementById("useCombinedMethods").checked;
            const weightRecent = document.getElementById("weightRecent").checked;
            const numbersToPredict = parseInt(document.getElementById("predictionCount").value);
            const maxNumber = Math.max(...draws.flat());
            
            // Perform analysis
            const analysis = performAdvancedAnalysis(draws);
            
            // Generate predictions based on selected method
            let predictions = [];
            
            if (method === 'frequency' || useCombinedMethods) {
                predictions = predictions.concat(generateFrequencyPredictions(analysis, numbersToPredict, weightRecent, draws.length));
            }
            
            if (method === 'gap' || useCombinedMethods) {
                predictions = predictions.concat(generateGapPredictions(analysis, numbersToPredict));
            }
            
            if (method === 'positional' || useCombinedMethods) {
                predictions = predictions.concat(generatePositionalPredictions(analysis, numbersToPredict));
            }
            
            if (method === 'markov') {
                predictions = predictions.concat(generateMarkovPredictions(draws, numbersToPredict, maxNumber));
            }
            
            // If combining methods, we need to deduplicate and rank
            if (useCombinedMethods) {
                predictions = combinePredictions(predictions, numbersToPredict);
            }
            
            // Display results
            displayPredictionResults(predictions.slice(0, numbersToPredict), analysis);
        }
        
        function generateFrequencyPredictions(analysis, count, weightRecent, totalDraws) {
            // Convert frequency to weighted scores
            const weightedNumbers = Object.entries(analysis.frequency).map(([num, freq]) => {
                let weight = freq;
                
                if (weightRecent) {
                    // Increase weight based on how recently the number appeared
                    const lastSeenDraw = analysis.lastSeen[num];
                    const drawsAgo = totalDraws - lastSeenDraw;
                    const recencyBoost = Math.max(0, 10 - drawsAgo) * 0.5; // Boost up to 5x for recent numbers
                    weight += recencyBoost;
                }
                
                return {
                    number: parseInt(num),
                    weight: weight
                };
            });
            
            // Sort by weight
            weightedNumbers.sort((a, b) => b.weight - a.weight);
            
            // Return top numbers
            return weightedNumbers.slice(0, count).map(x => x.number);
        }
        
        function generateGapPredictions(analysis, count) {
            // Numbers that are "due" based on gap analysis
            const gapNumbers = Object.entries(analysis.gaps).map(([num, avgGap]) => {
                const lastSeen = analysis.lastSeen[num];
                const drawsSinceSeen = analysis.totalDraws - lastSeen;
                const dueScore = drawsSinceSeen / avgGap; // >1 means overdue
                
                return {
                    number: parseInt(num),
                    score: dueScore
                };
            });
            
            // Sort by due score
            gapNumbers.sort((a, b) => b.score - a.score);
            
            // Return top overdue numbers
            return gapNumbers.slice(0, count).map(x => x.number);
        }
        
        function generatePositionalPredictions(analysis, count) {
            // Predict numbers based on their positional frequency
            const positionNumbers = [];
            
            for (const [pos, numbers] of Object.entries(analysis.positions)) {
                // Take top 2 numbers from each position
                for (let i = 0; i < Math.min(2, numbers.length); i++) {
                    const num = numbers[i][0];
                    const freq = numbers[i][1];
                    
                    positionNumbers.push({
                        number: num,
                        position: parseInt(pos),
                        frequency: freq
                    });
                }
            }
            
            // Sort by frequency
            positionNumbers.sort((a, b) => b.frequency - a.frequency);
            
            // Return top numbers
            return positionNumbers.slice(0, count).map(x => x.number);
        }
        
        function generateMarkovPredictions(draws, count, maxNumber) {
            // Simple Markov chain prediction (simplified)
            const markovChain = {};
            
            // Initialize Markov chain
            for (let i = 1; i <= maxNumber; i++) {
                markovChain[i] = {};
                for (let j = 1; j <= maxNumber; j++) {
                    markovChain[i][j] = 0;
                }
            }
            
            // Build transition matrix
            for (const draw of draws) {
                for (let i = 0; i < draw.length - 1; i++) {
                    const from = draw[i];
                    const to = draw[i + 1];
                    markovChain[from][to]++;
                }
            }
            
            // Find most likely transitions from last draw's numbers
            const lastDraw = draws[draws.length - 1];
            const transitionScores = {};
            
            for (const num of lastDraw) {
                const transitions = markovChain[num];
                const totalTransitions = Object.values(transitions).reduce((a, b) => a + b, 0);
                
                for (const [to, count] of Object.entries(transitions)) {
                    if (count > 0) {
                        const probability = count / totalTransitions;
                        transitionScores[to] = (transitionScores[to] || 0) + probability;
                    }
                }
            }
            
            // Convert to array and sort
            const scoredNumbers = Object.entries(transitionScores).map(([num, score]) => ({
                number: parseInt(num),
                score: score
            }));
            
            scoredNumbers.sort((a, b) => b.score - a.score);
            
            // Return top numbers
            return scoredNumbers.slice(0, count).map(x => x.number);
        }
        
        function combinePredictions(predictions, count) {
            // Combine predictions from different methods and rank them
            const predictionScores = {};
            
            for (const num of predictions) {
                predictionScores[num] = (predictionScores[num] || 0) + 1;
            }
            
            // Convert to array and sort
            const scoredNumbers = Object.entries(predictionScores).map(([num, score]) => ({
                number: parseInt(num),
                score: score
            }));
            
            scoredNumbers.sort((a, b) => b.score - a.score);
            
            // Return top numbers
            return scoredNumbers.slice(0, count).map(x => x.number);
        }
        
        function displayPredictionResults(predictions, analysis) {
            let html = `<h3>Smart Prediction Results</h3>`;
            html += `<div class="result">Based on advanced analysis of historical patterns, these numbers show the highest probability of appearing in future draws:</div>`;
            
            html += `<div style="margin: 20px 0;">`;
            for (const num of predictions) {
                const isHot = analysis.hotNumbers.includes(num.toString());
                const isCold = analysis.coldNumbers.includes(num.toString());
                
                let ballClass = '';
                if (isHot) ballClass = 'highlight';
                if (isCold) ballClass = 'cold';
                
                html += `<span class="number-ball ${ballClass}">${num}</span>`;
            }
            html += `</div>`;
            
            // Show analysis of why these numbers were selected
            html += `<h4>Prediction Analysis</h4>`;
            html += `<ul>`;
            
            for (const num of predictions) {
                const freq = analysis.frequency[num] || 0;
                const lastSeen = analysis.totalDraws - (analysis.lastSeen[num] || 0);
                const avgGap = analysis.gaps[num] ? analysis.gaps[num].toFixed(1) : 'N/A';
                
                html += `<li>
                    <strong>Number ${num}</strong>:
                    Appeared ${freq} times (${(freq/analysis.totalDraws*100).toFixed(1)}%),
                    Last seen ${lastSeen} draws ago,
                    Average gap: ${avgGap} draws
                </li>`;
            }
            
            html += `</ul>`;
            
            document.getElementById("predictionOutput").innerHTML = html;
        }
        
        // Utility function to wait for a delay
        function delay(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }
        
        // Initialize the app
        document.addEventListener('DOMContentLoaded', function() {
            // Any initialization code can go here
        });
    </script>
</body>
</html>
